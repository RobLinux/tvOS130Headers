/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:50:47 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/Frameworks/Security.framework/XPCServices/TrustedPeersHelper.xpc/TrustedPeersHelper
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TrustedPeersHelper/TrustedPeersHelper-Structs.h>
#import <TrustedPeersHelper/NSCopying.h>
#import <TrustedPeersHelper/NSSecureCoding.h>

@class NSString, CKRecordZoneID, CKKSWrappedAESSIVKey, CKKSAESSIVKey;

@interface CKKSKeychainBackedKey : NSObject <NSCopying, NSSecureCoding> {

	NSString* _uuid;
	NSString* _parentKeyUUID;
	NSString* _keyclass;
	CKRecordZoneID* _zoneID;
	CKKSWrappedAESSIVKey* _wrappedkey;
	CKKSAESSIVKey* _aessivkey;

}

@property (retain) NSString * uuid;                                  //@synthesize uuid=_uuid - In the implementation block
@property (retain) NSString * parentKeyUUID;                         //@synthesize parentKeyUUID=_parentKeyUUID - In the implementation block
@property (retain) NSString*<SecCKKSKeyClass> keyclass;              //@synthesize keyclass=_keyclass - In the implementation block
@property (retain) CKRecordZoneID * zoneID;                          //@synthesize zoneID=_zoneID - In the implementation block
@property (retain) CKKSWrappedAESSIVKey * wrappedkey;                //@synthesize wrappedkey=_wrappedkey - In the implementation block
@property (retain) CKKSAESSIVKey * aessivkey;                        //@synthesize aessivkey=_aessivkey - In the implementation block
+(BOOL)supportsSecureCoding;
+(id)fetchKeyMaterialItemFromKeychain:(id)arg1 resave:(BOOL*)arg2 error:(id*)arg3 ;
+(id)setKeyMaterialInKeychain:(id)arg1 error:(id*)arg2 ;
+(id)randomKeyWrappedByParent:(id)arg1 error:(id*)arg2 ;
+(id)randomKeyWrappedByParent:(id)arg1 keyclass:(NSString*)arg2 error:(id*)arg3 ;
+(id)randomKeyWrappedBySelf:(id)arg1 error:(id*)arg2 ;
+(id)queryKeyMaterialInKeychain:(id)arg1 error:(id*)arg2 ;
+(id)keyFromKeychain:(id)arg1 parentKeyUUID:(id)arg2 keyclass:(NSString*)arg3 zoneID:(id)arg4 error:(id*)arg5 ;
+(id)loadFromProtobuf:(id)arg1 error:(id*)arg2 ;
-(BOOL)isEqual:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)description;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(NSString *)uuid;
-(CKRecordZoneID *)zoneID;
-(void)setUuid:(NSString *)arg1 ;
-(void)setZoneID:(CKRecordZoneID *)arg1 ;
-(NSString*<SecCKKSKeyClass>)keyclass;
-(NSString *)parentKeyUUID;
-(CKKSWrappedAESSIVKey *)wrappedkey;
-(BOOL)saveKeyMaterialToKeychain:(id*)arg1 ;
-(id)wrapAESKey:(id)arg1 error:(id*)arg2 ;
-(id)unwrapAESKey:(id)arg1 error:(id*)arg2 ;
-(id)encryptData:(id)arg1 authenticatedData:(id)arg2 error:(id*)arg3 ;
-(id)decryptData:(id)arg1 authenticatedData:(id)arg2 error:(id*)arg3 ;
-(id)initSelfWrappedWithAESKey:(id)arg1 uuid:(id)arg2 keyclass:(NSString*)arg3 zoneID:(id)arg4 ;
-(id)initWrappedBy:(id)arg1 AESKey:(id)arg2 uuid:(id)arg3 keyclass:(NSString*)arg4 zoneID:(id)arg5 ;
-(id)initWithWrappedAESKey:(id)arg1 uuid:(id)arg2 parentKeyUUID:(id)arg3 keyclass:(NSString*)arg4 zoneID:(id)arg5 ;
-(BOOL)wrapsSelf;
-(BOOL)wrapUnder:(id)arg1 error:(id*)arg2 ;
-(BOOL)unwrapSelfWithAESKey:(id)arg1 error:(id*)arg2 ;
-(id)ensureKeyLoaded:(id*)arg1 ;
-(BOOL)trySelfWrappedKeyCandidate:(id)arg1 error:(id*)arg2 ;
-(BOOL)saveKeyMaterialToKeychain:(BOOL)arg1 error:(id*)arg2 ;
-(BOOL)loadKeyMaterialFromKeychain:(id*)arg1 ;
-(BOOL)deleteKeyMaterialFromKeychain:(id*)arg1 ;
-(id)serializeAsProtobuf:(id*)arg1 ;
-(void)setParentKeyUUID:(NSString *)arg1 ;
-(void)setKeyclass:(NSString*<SecCKKSKeyClass>)arg1 ;
-(void)setWrappedkey:(CKKSWrappedAESSIVKey *)arg1 ;
-(CKKSAESSIVKey *)aessivkey;
-(void)setAessivkey:(CKKSAESSIVKey *)arg1 ;
@end

