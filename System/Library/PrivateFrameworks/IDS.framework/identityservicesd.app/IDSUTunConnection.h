/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:41:55 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <identityservicesd/identityservicesd-Structs.h>
#import <identityservicesd/IDSSocketPairConnectionDelegate.h>
#import <identityservicesd/NSCopying.h>

@protocol IDSUTunConnectionDelegate, IDSSocketPairConnectionProtocol;
@class NSMutableArray, NSMutableDictionary, IMTimer, NSString, IDSLocalDeliveryQueue, IMPowerAssertion, NSDate, NSMutableSet, IDSUTunPeerServiceMap, NSArray, NSDictionary;

@interface IDSUTunConnection : NSObject <IDSSocketPairConnectionDelegate, NSCopying> {

	id<IDSUTunConnectionDelegate> _delegate;
	NSMutableArray* _sendingMessages;
	NSMutableArray* _fallbackMessages;
	NSMutableDictionary* _statistics;
	NSMutableDictionary* _cumulativeOutgoingStatistics;
	NSMutableDictionary* _cumulativeIncomingStatistics;
	NSMutableDictionary* _tokenToOTREncryptionQueue;
	NSMutableDictionary* _tokenToOTRError;
	NSMutableDictionary* _dataProtectedIncomingMessages;
	id<IDSSocketPairConnectionProtocol> _socketConnection;
	BOOL _openSocketCalled;
	BOOL _connectionSuspended;
	IMTimer* _timeoutTimer;
	IMTimer* _fallbackTimer;
	IMTimer* _dequeueTimer;
	NSString* _identifier;
	NSString* _otrTokenIdentifier;
	IDSLocalDeliveryQueue* _deliveryQueue;
	IMPowerAssertion* _sendingPowerAssertion;
	double _rtt;
	long long _cachedBytes[3];
	unsigned long long _maxQueueSize;
	long long _priority;
	NSString* _cbuuid;
	NSString* _uniqueID;
	NSDate* _lastFallback;
	BOOL _isMagnetIndicatingPeerIsAwake;
	BOOL _enabled;
	BOOL _needsHandshake;
	BOOL _isAlwaysConnected;
	BOOL _isCloudEnabled;
	NSMutableDictionary* _incomingResourceTransfers;
	NSMutableSet* _resettingIncomingResourceTransfers;
	NSMutableSet* _resumingIncomingResourceTransfers;
	BOOL _resumeResourceTransfers;
	BOOL _enableOTR;
	BOOL _useSharedOTRSession;
	BOOL _useNamedOTRSessionToken;
	BOOL _supportsLegacyOTRSessionToken;
	BOOL _newServiceSupported;
	BOOL _supportDynamicServices;
	BOOL _supportDynamicServicesOptimization;
	unsigned short _serviceMinCompatibilityVersion;
	NSMutableSet* _admissionDeniedTopics;
	unsigned char _remoteInstanceID[16];
	IDSUTunPeerServiceMap* _incomingServiceMap;
	IDSUTunPeerServiceMap* _outgoingServiceMap;
	NSMutableDictionary* _incomingServiceMapUpdateCounter;
	NSArray* _supportedMessageTypes;
	BOOL _shouldAbortOnMissingTopic;
	BOOL _shouldUseIPsecLink;
	BOOL _shouldUseNWFraming;
	unsigned _dataProtectionClass;
	long long _idsPriority;
	IDSUTunConnection* _cloudConnection;
	NSString* _name;

}

@property (assign,nonatomic,__weak) id<IDSUTunConnectionDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) unsigned long long maxQueueSize;                            //@synthesize maxQueueSize=_maxQueueSize - In the implementation block
@property (nonatomic,readonly) BOOL isConnected; 
@property (assign,nonatomic) BOOL isAlwaysConnected;                                     //@synthesize isAlwaysConnected=_isAlwaysConnected - In the implementation block
@property (nonatomic,readonly) NSString * identifier;                                    //@synthesize identifier=_identifier - In the implementation block
@property (nonatomic,readonly) NSDictionary * sendingMessageStatistics; 
@property (nonatomic,readonly) NSDictionary * queueStatistics; 
@property (nonatomic,readonly) BOOL isIdle; 
@property (nonatomic,readonly) NSDictionary * cumulativeIncomingStatistics;              //@synthesize cumulativeIncomingStatistics=_cumulativeIncomingStatistics - In the implementation block
@property (nonatomic,readonly) NSDictionary * cumulativeOutgoingStatistics;              //@synthesize cumulativeOutgoingStatistics=_cumulativeOutgoingStatistics - In the implementation block
@property (assign,nonatomic) BOOL enableOTR;                                             //@synthesize enableOTR=_enableOTR - In the implementation block
@property (nonatomic,readonly) BOOL isCloudEnabled;                                      //@synthesize isCloudEnabled=_isCloudEnabled - In the implementation block
@property (assign,nonatomic) BOOL supportsLegacyOTRSessionToken;                         //@synthesize supportsLegacyOTRSessionToken=_supportsLegacyOTRSessionToken - In the implementation block
@property (nonatomic,retain) NSArray * supportedMessageTypes;                            //@synthesize supportedMessageTypes=_supportedMessageTypes - In the implementation block
@property (nonatomic,readonly) double rtt;                                               //@synthesize rtt=_rtt - In the implementation block
@property (nonatomic,readonly) long long priority;                                       //@synthesize priority=_priority - In the implementation block
@property (nonatomic,retain) IDSUTunConnection * cloudConnection;                        //@synthesize cloudConnection=_cloudConnection - In the implementation block
@property (assign,nonatomic) unsigned dataProtectionClass;                               //@synthesize dataProtectionClass=_dataProtectionClass - In the implementation block
@property (assign,nonatomic) long long idsPriority;                                      //@synthesize idsPriority=_idsPriority - In the implementation block
@property (nonatomic,retain) NSString * name;                                            //@synthesize name=_name - In the implementation block
@property (nonatomic,retain) NSString * cbuuid;                                          //@synthesize cbuuid=_cbuuid - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(NSString *)name;
-(BOOL)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)copyWithZone:(NSZone*)arg1 ;
-(NSString *)description;
-(void)dealloc;
-(void)setEnabled:(BOOL)arg1 ;
-(id<IDSUTunConnectionDelegate>)delegate;
-(void)setDelegate:(id<IDSUTunConnectionDelegate>)arg1 ;
-(void)setName:(NSString *)arg1 ;
-(NSString *)identifier;
-(void)sendMessage:(id)arg1 ;
-(long long)priority;
-(BOOL)isEnabled;
-(BOOL)isConnected;
-(double)rtt;
-(void)clearStats;
-(unsigned)dataProtectionClass;
-(NSString *)cbuuid;
-(void)setCbuuid:(NSString *)arg1 ;
-(void)connectionDidClose:(id)arg1 ;
-(void)setDataProtectionClass:(unsigned)arg1 ;
-(id)serviceController;
-(BOOL)isCloudEnabled;
-(void)_startConnection;
-(BOOL)isIdle;
-(void)_timeoutTimerFired;
-(void)setIdsPriority:(long long)arg1 ;
-(long long)idsPriority;
-(NSArray *)supportedMessageTypes;
-(void)connectionDidReachInFlightMessageLowWaterMark:(id)arg1 ;
-(void)connection:(id)arg1 didReceiveDataMessage:(id)arg2 ;
-(void)connectionDidReceiveBytes:(id)arg1 ;
-(void)connectionBecameEmpty:(id)arg1 ;
-(id)initWithIdentifier:(id)arg1 socketPriority:(long long)arg2 btUUID:(id)arg3 uniqueID:(id)arg4 incomingServiceMap:(id)arg5 outgoingServiceMap:(id)arg6 isCloudEnabled:(BOOL)arg7 shouldUseIPsecLink:(BOOL)arg8 ;
-(void)setSupportsLegacyOTRSessionToken:(BOOL)arg1 ;
-(void)setMaxQueueSize:(unsigned long long)arg1 ;
-(void)setSupportedMessageTypes:(NSArray *)arg1 ;
-(void)setCloudConnection:(IDSUTunConnection *)arg1 ;
-(IDSUTunConnection *)cloudConnection;
-(void)invalidateTimeoutTimer;
-(void)sendAckForMessageWithSequenceNumber:(unsigned)arg1 ;
-(BOOL)hasSpaceForMessagesWithDataProtectionClass:(unsigned)arg1 ;
-(NSDictionary *)sendingMessageStatistics;
-(void)_addStatsFromDict:(id)arg1 toAggregate:(id)arg2 ;
-(NSDictionary *)queueStatistics;
-(NSDictionary *)cumulativeOutgoingStatistics;
-(NSDictionary *)cumulativeIncomingStatistics;
-(void)flushAllMessagesForReason:(long long)arg1 ;
-(void)setEnableOTR:(BOOL)arg1 ;
-(void)setIsMagnetIndicatingPeerIsAwake:(BOOL)arg1 ;
-(void)dropDisallowedMessages;
-(void)trafficClassesChanged;
-(void)cancelMessageID:(id)arg1 ;
-(void)kickProgressBlockForMessageID:(id)arg1 ;
-(void)resumeConnectivity;
-(void)setIsAlwaysConnected:(BOOL)arg1 ;
-(void)setEnabled:(BOOL)arg1 withReason:(id)arg2 ;
-(void)forceOTRNegotiation:(id)arg1 priority:(long long)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)admissionPolicyChangedForTopic:(id)arg1 allowed:(BOOL)arg2 ;
-(BOOL)isMagnetIndicatingPeerIsAwake;
-(void)didReceiveDataMessage:(id)arg1 ;
-(void)connectionDidClose;
-(void)connectionBecameEmpty;
-(BOOL)enableOTR;
-(void)classStorageBecameAvailable:(id)arg1 ;
-(void)_nonThreadSafeStopConnection;
-(BOOL)_isMagnetConnection;
-(unsigned long long)_inflightMessageCount;
-(unsigned long long)_sendingMessageCountForClass:(unsigned)arg1 ;
-(unsigned long long)_sendingMessageCountForType:(long long)arg1 ;
-(unsigned long long)_pendingOutgoingBytesForClass:(unsigned)arg1 ;
-(BOOL)_isWiProxPeer;
-(BOOL)_nonThreadSafeIsConnected;
-(id)_nonThreadSafeSocketOptions;
-(void)_connectivityChanged;
-(void)_removeSocketPairMessage:(id)arg1 localMessage:(id)arg2 reason:(id)arg3 detailedError:(id)arg4 responseCode:(long long)arg5 ;
-(void)_dequeueMessages;
-(void)_startConnectionForContinuityPeer;
-(void)_clearLastFallbackWithReason:(id)arg1 ;
-(void)_startNWConnectinForIPsecCase:(int)arg1 controlChannelVersion:(id)arg2 capabilityFlags:(unsigned long long)arg3 instanceID:(unsigned char*)arg4 serviceMinCompatibilityVersion:(unsigned short)arg5 ;
-(void)_startAndSetupSocketPairConnection:(id)arg1 capabilityFlags:(unsigned long long)arg2 instanceID:(unsigned char*)arg3 serviceMinCompatibilityVersion:(unsigned short)arg4 socketDescriptor:(int)arg5 ;
-(void)_sendSocketMessage:(id)arg1 ;
-(void)_removeMessageFromStatistics:(id)arg1 ;
-(void)_checkAndStartConnection;
-(id)_encryptDataWithOTR:(id)arg1 token:(id)arg2 ;
-(id)_decryptOTREncrtypedMessage:(id)arg1 ;
-(unsigned long long)_currentLink;
-(void)_removeSocketPairMessage:(id)arg1 localMessage:(id)arg2 reason:(id)arg3 responseCode:(long long)arg4 ;
-(void)_resetFallbackTimeout:(double)arg1 useNextFallback:(BOOL)arg2 ;
-(void)_startMessagesDequeueMessagesTimer;
-(void)_resetTimeout:(id)arg1 ;
-(void)_handleBecomingEmptyForDataProtectionClass:(unsigned)arg1 ;
-(void)_handleBecomingEmpty;
-(void)_handleBecomingEmptyOfCloudMessages;
-(void)_clearSendingPowerAssertionWithReason:(id)arg1 ;
-(double)_nanoConnectedFallbackTimeoutForService:(id)arg1 ;
-(double)_nanoDisconnectedFallbackTimeoutForService:(id)arg1 ;
-(double)_fallbackTimeoutForService:(id)arg1 ;
-(void)_fallbackTimerFired;
-(BOOL)_messageIsAllowedToSendMessageOnTopic:(id)arg1 ;
-(BOOL)_performFallbackIfNecessary:(id)arg1 ;
-(void)_messageTimedOut:(id)arg1 localMessage:(id)arg2 ;
-(unsigned long long)_inflightMessageCountForClass:(unsigned)arg1 ;
-(BOOL)_shouldAWDLogMessage:(id)arg1 ;
-(void)_sendSocketMessage:(id)arg1 ignoreSequenceNumber:(BOOL)arg2 ;
-(void)_invalidateMessagesDequeueTimer;
-(BOOL)supportsMessageOfType:(long long)arg1 ;
-(unsigned long long)_inflightMessageCountForType:(long long)arg1 ;
-(BOOL)checkServiceCompability:(id)arg1 localMessage:(id)arg2 ;
-(BOOL)_nonBTAllowedForClientID:(id)arg1 ;
-(void)_addOutgoingMessageSize:(unsigned long long)arg1 forTopic:(id)arg2 dataProtectionClass:(unsigned)arg3 isResource:(BOOL)arg4 ;
-(BOOL)_messageHasValidEncryptionStatus:(id)arg1 ;
-(void)_sendEncryptedMessage:(id)arg1 ;
-(void)_updateDictionary:(id)arg1 addMessageSize:(long long)arg2 addMessageCount:(long long)arg3 ;
-(void)_addMessageSize:(unsigned long long)arg1 forTopic:(id)arg2 direction:(unsigned char)arg3 dataProtectionClass:(unsigned)arg4 isResource:(BOOL)arg5 ;
-(id)_sendingMessageStatisticsForClass:(unsigned)arg1 ;
-(double)_dequeueMessagesTimerInterval;
-(void)_dequeueMessagesTimerDidFire:(id)arg1 ;
-(void)_requeueSendingMessage:(id)arg1 ;
-(void)_requeueMessages:(id)arg1 ;
-(void)handleOTRNegotiationComplete:(id)arg1 ;
-(void)handleOTRNegotiationTimeout:(id)arg1 ;
-(void)_processIncomingDataMessage:(id)arg1 ;
-(void)_sendOTREncryptedMessage:(id)arg1 useEncryption:(BOOL)arg2 streamID:(unsigned short)arg3 forPriority:(long long)arg4 flag:(int)arg5 token:(id)arg6 ;
-(void)_sendPublicKeyEncryptedMessage:(id)arg1 ;
-(void)_sendOTREncryptionQueue:(id)arg1 streamID:(unsigned short)arg2 ;
-(BOOL)_storeIncomingClassCDataMessageIfNeeded:(id)arg1 topic:(id)arg2 sequenceNumber:(unsigned)arg3 ;
-(void)_handleOTRDecryptionSuccess:(id)arg1 ;
-(BOOL)_storeIncomingClassADataMesageIfNeeded:(id)arg1 topic:(id)arg2 sequenceNumber:(unsigned)arg3 ;
-(void)_handleOTRDecryptionError:(id)arg1 ;
-(void)_decryptPublicKeyEncryptedMessage:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(void)_flushMessagesAll:(BOOL)arg1 response:(long long)arg2 ;
-(void)_processMessage:(id)arg1 withSequenceNumberBlock:(/*^block*/id)arg2 ;
-(void)_addIncomingMessageSize:(unsigned long long)arg1 forTopic:(id)arg2 ;
-(long long)_socketToNiceCommand:(unsigned char)arg1 ;
-(void)_processDecryptedMessage:(id)arg1 ;
-(void)_optionallyDecryptMessage:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(void)_sendExpiredAckForMessage:(id)arg1 ;
-(void)_dumpLogs;
-(void)_sendAckForMessage:(id)arg1 ;
-(void)_processIncomingResourceTransferMessage:(id)arg1 messageUUID:(id)arg2 streamID:(unsigned short)arg3 topic:(id)arg4 wantsAppAck:(BOOL)arg5 expectsPeerResponse:(BOOL)arg6 peerResponseIdentifier:(id)arg7 isDefaultPairedDevice:(BOOL)arg8 ;
-(void)setDeviceBTUUID:(id)arg1 ;
-(unsigned long long)maxQueueSize;
-(BOOL)isAlwaysConnected;
-(BOOL)supportsLegacyOTRSessionToken;
@end

