/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:41:54 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <identityservicesd/IDSUTunDeliveryControllerConnectivityDelegate.h>

@class NSHashTable, IDSCountdown, NSMutableDictionary, NRDeviceManager, IDSPairedDeviceRepository, NSMutableArray, NSString, NSDictionary, NSSet, NSData;

@interface IDSPairingManager : NSObject <IDSUTunDeliveryControllerConnectivityDelegate> {

	NSHashTable* _delegateMap;
	BOOL _hasLoadedPairedDevices;
	int _pairingStateToken;
	/*^block*/id _block;
	BOOL _isPendingResetOfKeyRegenerationFlag;
	IDSCountdown* _pairedDeviceInfoRequestCountdown;
	NSMutableDictionary* _cbuuidToBTOutOfBandKeyDictionary;
	BOOL _shouldQuickSwitchAfterIPSecConnected;
	NRDeviceManager* _nrDeviceManager;
	IDSPairedDeviceRepository* _pairedDeviceRepository;
	NSMutableArray* _registeredPairedDeviceDidConnectBlockPairs;

}

@property (nonatomic,readonly) NRDeviceManager * nrDeviceManager;                                        //@synthesize nrDeviceManager=_nrDeviceManager - In the implementation block
@property (nonatomic,readonly) IDSPairedDeviceRepository * pairedDeviceRepository;                       //@synthesize pairedDeviceRepository=_pairedDeviceRepository - In the implementation block
@property (nonatomic,readonly) NSMutableArray * registeredPairedDeviceDidConnectBlockPairs;              //@synthesize registeredPairedDeviceDidConnectBlockPairs=_registeredPairedDeviceDidConnectBlockPairs - In the implementation block
@property (assign,nonatomic) BOOL shouldQuickSwitchAfterIPSecConnected;                                  //@synthesize shouldQuickSwitchAfterIPSecConnected=_shouldQuickSwitchAfterIPSecConnected - In the implementation block
@property (nonatomic,readonly) NSString * pairedDeviceUUIDString; 
@property (nonatomic,readonly) NSString * pairedDeviceUniqueID; 
@property (nonatomic,readonly) unsigned pairedDevicePairingProtocolVersion; 
@property (nonatomic,readonly) unsigned pairedDeviceMinCompatibilityVersion; 
@property (nonatomic,readonly) unsigned pairedDeviceMaxCompatibilityVersion; 
@property (nonatomic,readonly) unsigned short pairedDeviceServiceMinCompatibilityVersion; 
@property (nonatomic,readonly) NSDictionary * pairedDevice; 
@property (nonatomic,readonly) NSSet * allPairedDevices; 
@property (nonatomic,readonly) NSData * pairedDevicePublicKey; 
@property (nonatomic,readonly) NSData * pairedDevicePublicClassAKey; 
@property (nonatomic,readonly) NSData * pairedDevicePublicClassCKey; 
@property (nonatomic,readonly) NSData * pairedDevicePushToken; 
@property (nonatomic,readonly) NSDictionary * pairedDevicePrivateData; 
@property (nonatomic,readonly) NSDictionary * localDevice; 
@property (nonatomic,readonly) BOOL isPaired; 
@property (nonatomic,readonly) NSSet * allPairedUniqueIDs; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
+(BOOL)_isIPsecSupportedByCapabilityFlags:(unsigned long long)arg1 ;
+(BOOL)_isEncryptionKeyRegenerationSupportedByCapabilityFlags:(unsigned long long)arg1 ;
+(void)devicePairingProtocolVersion:(unsigned*)arg1 minCompatibilityVersion:(unsigned*)arg2 maxCompatibilityVersion:(unsigned*)arg3 ;
-(NSString *)description;
-(id)init;
-(void)dealloc;
-(void)addDelegate:(id)arg1 ;
-(void)removeDelegate:(id)arg1 ;
-(NSDictionary *)localDevice;
-(NSDictionary *)pairedDevice;
-(void)systemDidLeaveFirstDataProtectionLock;
-(BOOL)setPairedDeviceInfo:(id)arg1 ;
-(void)deactivatePairedDevices;
-(BOOL)isPaired;
-(NSSet *)allPairedDevices;
-(NSData *)pairedDevicePublicKey;
-(NSData *)pairedDevicePublicClassAKey;
-(NSData *)pairedDevicePublicClassCKey;
-(BOOL)shouldUseIPsecLinkForDefaultPairedDevice;
-(NSString *)pairedDeviceUniqueID;
-(NSString *)pairedDeviceUUIDString;
-(long long)activatePairedDeviceWithCBUUID:(id)arg1 ;
-(void)ensureCommunicationWithActivePairedDeviceIsPossible;
-(unsigned short)pairedDeviceServiceMinCompatibilityVersion;
-(void)deliveryController:(id)arg1 foundNearbyIPsecCapableDeviceWithUniqueID:(id)arg2 ;
-(BOOL)isCurrentDevicePairedOrPairing;
-(NSSet *)allPairedUniqueIDs;
-(unsigned)pairedDevicePairingProtocolVersion;
-(unsigned)pairedDeviceMinCompatibilityVersion;
-(unsigned)pairedDeviceMaxCompatibilityVersion;
-(NSDictionary *)pairedDevicePrivateData;
-(id)pairedDeviceForUniqueID:(id)arg1 ;
-(void)_notifyDelegatesWithBlock:(/*^block*/id)arg1 ;
-(IDSPairedDeviceRepository *)pairedDeviceRepository;
-(BOOL)_hasAllEncryptionKeys;
-(void)_requestPairedDeviceInfo;
-(void)_requestPairedDeviceInfoAfterDelay:(double)arg1 ;
-(id)_activePairedDeviceCBUUID;
-(void)_loadPairedDevicePropertiesIfNeeded;
-(void)_updatePairedState:(BOOL)arg1 ;
-(void)_updateActiveStateForAllPairedDevices;
-(void)updateNetworkRelayStateForAllPairedDevices;
-(id)initWithNRDeviceManager:(id)arg1 pairedDeviceRepository:(id)arg2 ;
-(long long)_migrateSecuredEncryptionKeys;
-(BOOL)_markSecuredEncryptionKeysAsRegenerated:(BOOL)arg1 ;
-(void)_suspendOTRSessionsWithProtectionClass:(unsigned)arg1 ;
-(id)_localDevicePrivateData;
-(BOOL)_isPairedToDevice:(id)arg1 ;
-(void)_updateActiveStateForAllPairedDevices:(BOOL)arg1 ;
-(void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 wasInitiallySetupUsingIDSPairing:(BOOL)arg2 maxCompatibilityVersion:(id)arg3 BTOutOfBandKey:(id)arg4 supportsIPsecWithSPPLink:(BOOL)arg5 bluetoothMACAddress:(id)arg6 ;
-(BOOL)updatePairedDeviceWithCBUUID:(id)arg1 supportIPsec:(BOOL)arg2 ;
-(void)_callPairedDeviceDidConnectBlocksForUniqueID:(id)arg1 withError:(id)arg2 ;
-(void)_notifyDelegatesDevicePairedToDevice:(id)arg1 ;
-(void)_clearPairedDeviceDidConnectBlocksForUniqueID:(id)arg1 ;
-(id)_nrDeviceIdentifierWithCBUUID:(id)arg1 ;
-(NRDeviceManager *)nrDeviceManager;
-(void)_notifyDelegatesDeviceUnpairedFromDevice:(id)arg1 ;
-(void)setShouldQuickSwitchAfterIPSecConnected:(BOOL)arg1 ;
-(id)cbuuidsOfPairedDevices;
-(BOOL)isMissingAnyPublicKeyForPairedDeviceWithCBUUID:(id)arg1 ;
-(id)_cbuuidsWithIsPairingValue:(BOOL)arg1 ;
-(id)_identityDataErrorPairForDataProtectionClass:(unsigned)arg1 ;
-(BOOL)shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:(BOOL)arg1 ;
-(NSMutableArray *)registeredPairedDeviceDidConnectBlockPairs;
-(id)pairedDeviceBuildVersion;
-(id)pairedDeviceProductVersion;
-(id)pairedDeviceProductName;
-(BOOL)_isIPSecLinkEnabled;
-(BOOL)_purgeSecuredEncryptionKeysForAllPairedDevices;
-(BOOL)shouldQuickSwitchAfterIPSecConnected;
-(unsigned long long)_hasRegeneratedSecuredEncryptionKeys;
-(void)_regenerateSecuredEncryptionKeys;
-(void)gatherLocalDeviceInfoWithCompletionBlock:(/*^block*/id)arg1 ;
-(NSData *)pairedDevicePushToken;
-(BOOL)addLocalPairedDevice:(id)arg1 BTOutOfBandKey:(id)arg2 supportsIPsecWithSPPLink:(BOOL)arg3 bluetoothMACAddress:(id)arg4 ;
-(BOOL)removeLocalPairedDevice:(id)arg1 ;
-(void)disconnectActivePairedDevice;
-(id)cbuuidsOfPairingDevices;
-(id)localDeviceRecord;
-(id)pairedDeviceRecords;
-(void)registerPairedDeviceWithUniqueID:(id)arg1 didConnectBlock:(/*^block*/id)arg2 ;
-(BOOL)updatePairedDeviceBuildVersion:(id)arg1 productVersion:(id)arg2 productName:(id)arg3 pairingProtocolVersion:(unsigned)arg4 minCompatibilityVersion:(unsigned)arg5 maxCompatibilityVersion:(unsigned)arg6 serviceMinCompatibilityVersion:(unsigned short)arg7 capabilityFlags:(unsigned long long)arg8 deviceUniqueID:(id)arg9 ;
-(void)refreshPairedDeviceEncryptionKeys;
@end

