/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:41:56 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <identityservicesd/identityservicesd-Structs.h>
#import <identityservicesd/IDSDAccountRegistrationListener.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSObject, NSMutableDictionary, IDSRealTimeEncryptionIdentity, NSTimer, NSString;

@interface IDSRealTimeEncryptionController : NSObject <IDSDAccountRegistrationListener> {

	NSObject*<OS_dispatch_queue> _realtimeEncryptionQueue;
	BOOL _isInternal;
	os_unfair_lock_s _lock;
	BOOL _shouldBroadcastAllValidMkMs;
	double _mkmAcknowledgementTimeout;
	double _preKeyRequestDelayDuration;
	unsigned _prekeyExpireDuration;
	unsigned _previousPrekeyExpireDuration;
	unsigned _mkmExpireDuration;
	unsigned _mkmRollDuration;
	unsigned char _MKMRecoveryRetryCount;
	BOOL _isMKMRecoveryRunning;
	BOOL _isDeferredPrekeyRequestPending;
	/*^block*/id _initialKeyMaterialDistributionTimeoutBlock;
	NSObject*<OS_dispatch_source> _mkmRollTimer;
	NSObject*<OS_dispatch_source> _mkmExpirationTimer;
	/*^block*/id _mkmRollBlock;
	/*^block*/id _mkmExpirationBlock;
	NSMutableDictionary* _accountIDs;
	NSMutableDictionary* _fromIDs;
	IDSRealTimeEncryptionIdentity* _identityForDevice;
	IDSRealTimeEncryptionIdentity* _previousIdentityForDevice;
	NSMutableDictionary* _prekeyAckCountForGroup;
	NSMutableDictionary* _publicKeyForDevice;
	NSMutableDictionary* _groupIDToKeyMaterialCache;
	NSMutableDictionary* _membersForGroup;
	NSMutableDictionary* _participantsForGroup;
	NSMutableDictionary* _participantsWaitingForKeyMaterials;
	NSMutableDictionary* _participantsWaitingForInitialKeyMaterials;
	NSMutableDictionary* _endpointSubscriptionForGroup;
	NSMutableDictionary* _lastKnownGroupIDToPushTokens;
	NSMutableDictionary* _lastKnownAccountIDToPushTokens;
	NSMutableDictionary* _pendingMasterKeyMaterials;
	NSTimer* _endpointUpdateTimer;
	BOOL _isTestRunning;

}

@property (assign,nonatomic) BOOL isTestRunning;                    //@synthesize isTestRunning=_isTestRunning - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
-(id)init;
-(void)sendMKMRecoveryRequestToGroup:(id)arg1 ;
-(id)publicKeys;
-(void)setAccount:(id)arg1 fromID:(id)arg2 forGroup:(id)arg3 ;
-(id)createRealTimeEncryptionFullIdentityForDevice:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(void)setMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 ;
-(void)sendPublicKeyToGroup:(id)arg1 sessionID:(id)arg2 ;
-(void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 ;
-(void)resetKeysForGroup:(id)arg1 shouldRemoveCurrentParticipants:(BOOL)arg2 ;
-(void)reliablyRequestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 ;
-(void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 ;
-(void)reportTimeDifferenceBetweenFirstPacketAndMKI:(long long)arg1 forMKI:(id)arg2 service:(id)arg3 activeParticipants:(long long)arg4 ;
-(void)resetKeyMaterialLocalSentStatus:(id)arg1 ;
-(void)unsubscribeEndpointsForGroup:(id)arg1 ;
-(void)removeAccountForGroup:(id)arg1 ;
-(void)didUpdateMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 ;
-(void)removeLocalActiveParticipantForGroup:(id)arg1 ;
-(void)reportPrekeyAckStatus:(id)arg1 ;
-(id)realTimeEncryptionPublicKeyData;
-(void)didUpdateParticipants:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 ;
-(double)_multiwayFTMessageSendTimeout;
-(void)removeActiveParticipant:(id)arg1 forGroup:(id)arg2 ;
-(BOOL)_shouldEnforceRemoteTimeout;
-(id)setMasterKeyMaterial:(id)arg1 forDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 fromSender:(BOOL)arg6 error:(id*)arg7 ;
-(void)noteReceivedGroupMasterKeyMaterials:(id)arg1 URIs:(id)arg2 sessionID:(id)arg3 ;
-(void)requestPendingKeyMaterialsForGroup:(id)arg1 sessionID:(id)arg2 ;
-(void)sendPublicKeyToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3 ;
-(void)processIncomingPrekeyRecoveryRequest:(id)arg1 fromDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6 ;
-(void)processIncomingPrekeyAckForGroup:(id)arg1 ;
-(BOOL)setRealTimeEncryptionPublicKey:(id)arg1 forDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6 ;
-(void)account:(id)arg1 didUpdateRegisteredDevices:(id)arg2 ;
-(BOOL)_isUsingAccount:(id)arg1 ;
-(void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(BOOL)arg4 shouldIncludeCachedPeerKeyMaterial:(BOOL)arg5 ;
-(void)cleanUpExpiredMasterKeyMaterial;
-(void)createKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 ;
-(void)_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:(id)arg1 ;
-(id)_localDevicePushToken;
-(void)_sendKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldIncludeCachedPeerKeyMaterial:(BOOL)arg4 ;
-(id)_pruneInvalidAndLocalPushTokensFromTokens:(id)arg1 ;
-(void)_sendRenewedPrekeysToGroups;
-(void)sendMKMRecoveryRequestToDevice:(id)arg1 fromID:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4 ;
-(void)_doCheckPendingMasterKeyMaterialsAndSendMKMRecoveryRequest;
-(BOOL)isTestRunning;
-(void)setIsTestRunning:(BOOL)arg1 ;
-(void)_dispatchRenewPrekeyTimer;
-(void)removeExpiredPrekeys;
-(void)_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:(id)arg1 remoteToken:(id)arg2 previousRemotePublicKey:(id)arg3 newRemotePublicKey:(id)arg4 ;
-(void)sendPendingKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 forDevice:(id)arg3 fromID:(id)arg4 ;
-(void)sendKeyMaterialsToWaitingParticipantsForGroup:(id)arg1 sessionID:(id)arg2 ;
-(void)sendPrekeyRequestToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3 ;
-(void)_sendMessage:(id)arg1 toDestination:(id)arg2 forGroup:(id)arg3 sessionID:(id)arg4 command:(long long)arg5 timeout:(double)arg6 shouldExpire:(BOOL)arg7 completion:(/*^block*/id)arg8 completionBlock:(/*^block*/id)arg9 ;
-(void)_stopMkmRollTimer;
-(void)_handleMkmRollTimer;
-(void)_handleMkmExpirationTimer;
-(void)_stopMkmExpirationTimer;
-(id)_locked_ensureGroupMasterKeyMaterialCacheForGroup:(id)arg1 ;
-(void)_startMkmRollTimer:(int)arg1 block:(/*^block*/id)arg2 ;
-(void)_startMkmExpirationTimer:(int)arg1 block:(/*^block*/id)arg2 ;
-(id)masterKeyMaterialForGroup:(id)arg1 ;
-(BOOL)_storePendingKeyMaterial:(id)arg1 forDevice:(id)arg2 ;
-(void)_startMKMRecovery;
-(id)_protectedCachedKeyMaterialsForDestination:(id)arg1 pushToken:(id)arg2 forGroup:(id)arg3 outURIs:(id*)arg4 includePeers:(BOOL)arg5 ;
-(void)sendKeyMaterialsToLocal:(id)arg1 sessionID:(id)arg2 ;
-(void)_noteKeyMaterialDidSendToDestination:(id)arg1 groupID:(id)arg2 withSuccess:(BOOL)arg3 ;
-(void)resetDevicePrekey;
-(void)rollNewKeysAfterResettingPrekeysForGroups:(id)arg1 withReason:(long long)arg2 ;
-(void)didReceiveEndpointsUpdate:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 ;
-(BOOL)_isValidPushToken:(id)arg1 ;
-(id)realTimeEncryptionPublicKeyDataForDevice:(id)arg1 ;
-(void)sendPrekeyRequestToGroup:(id)arg1 sessionID:(id)arg2 ;
-(id)activeParticipantsForGroup:(id)arg1 ;
@end

