/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:38:53 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/AppStoreDaemon.framework/Support/appstored
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <appstored/appstored-Structs.h>
@interface AppDefaultsManager : NSObject
+(unsigned long long)badgeCount;
+(void)setBadgeCount:(unsigned long long)arg1 ;
+(id)jobApprovalDate;
+(id)previouslyInstalledProvisionedApps;
+(void)setPreviouslyInstalledProvisionedApps:(id)arg1 ;
+(void)clearShouldSuppressTermsAndConditionsDialogs;
+(void)setShouldSuppressTermsAndConditionsDialogs:(BOOL)arg1 ;
+(BOOL)shouldSuppressTermsAndConditionsDialogs;
+(void)setRestoreSoftFailureRetryDate:(id)arg1 ;
+(id)restoreSoftFailureRetryDate;
+(BOOL)useFollowUpsForRestoreFailures;
+(id)attemptedPreflightAccountIDs;
+(void)setAttemptedPreflightAccountIDs:(id)arg1 ;
+(BOOL)offloadingAppsEnabled;
+(id)appPurgeBlacklist;
+(id)appPurgePluginBlacklist;
+(id)appPurgeCutoffDate;
+(id)appPurgeRecentInstallCutoffDate;
+(id)ocelotSubscriptionState;
+(id)ocelotPayoutResetDate;
+(id)ocelotPayoutIntervalStartDate;
+(id)ocelotSummaryIntervalStartDate;
+(id)ocelotPayoutDeviceID;
+(id)ocelotDeviceID;
+(void)setOcelotDeviceID:(id)arg1 ;
+(void)setOcelotSubscriptionState:(id)arg1 ;
+(id)ocelotAppAnalyticsClientID;
+(id)ocelotDeviceGUID;
+(id)ocelotDeviceIDCreationDate;
+(void)setOcelotDeviceGUID:(id)arg1 ;
+(void)setOcelotDeviceIDCreationDate:(id)arg1 ;
+(id)ocelotDefaultApp;
+(void)setOcelotPayoutDeviceID:(id)arg1 ;
+(id)ocelotApps;
+(BOOL)useAppInstallQueue;
+(id)lastArcadeStatusConditionSetDate;
+(void)setLastArcadeStatusConditionSetDate:(id)arg1 ;
+(id)testFlightVisualFeedbackOverrides;
+(BOOL)performedPostRestoreSoftwareUpdate;
+(BOOL)shouldPerformAutomaticUpdates;
+(BOOL)autoDownloadsEnabled;
+(id)crossfirePostMetricsSamplingPercentageOverride;
+(BOOL)externalManifestSkipHTTPSCheck;
+(BOOL)useModernFreeSpaceCheck;
+(id)forceDrmMode;
+(id)invalidBuildToolVersions;
+(void)setInvalidBuildToolVersions:(id)arg1 ;
+(BOOL)allowDownloadOnCellular;
+(id)appUsageFlushDnuIntervalOverride;
+(id)appUsageFlushDnuTargetDate;
+(void)setAppUsageFlushDnuTargetDate:(id)arg1 ;
+(id)appUsageDailyPostCountOverride;
+(id)lastUpdateCheckDate;
+(void)setLastUpdateCheckDate:(id)arg1 ;
+(id)crossfireLaunchesIntervalStartDate;
+(id)appUsageLaunchesIntervalStartDate;
+(id)ocelotSummaryLaunchesIntervalStartDate;
+(id)ocelotPayoutLaunchesIntervalStartDate;
+(BOOL)appUsageUseTestTopic;
+(void)recordCrossfireIntervalStartDate;
+(void)recordAppUsageIntervalStartDate;
+(void)recordOcelotSummaryIntervalStartDate;
+(void)recordOcelotPayoutIntervalStartDate;
+(void)recordCrossfireLaunchesIntervalStartDate;
+(void)recordAppUsageLaunchesIntervalStartDate;
+(void)recordOcelotSummaryLaunchesIntervalStartDate;
+(void)recordOcelotPayoutLaunchesIntervalStartDate;
+(id)crossfireIntervalStartDate;
+(id)appUsageIntervalStartDate;
+(id)lastJobCleanupDate;
+(id)lastUpdateCleanupDate;
+(id)lastGarbageCollectionDate;
+(void)recordLastUpdateCleanupDate;
+(BOOL)disablePowerOnStartup;
+(BOOL)batterySaverEnabledOnStartup;
+(BOOL)emulateCellularNetwork;
+(id)manageSubsOnDeleteBlacklist;
+(void)setManageSubsOnDeleteBlacklist:(id)arg1 ;
+(id)transporterConfiguration;
+(void)setTransporterConfiguration:(id)arg1 ;
+(BOOL)automationRunning;
+(BOOL)emulateConstrainedNetwork;
+(BOOL)emulateRoamingNetwork;
+(id)cellularSizeLimitOverride;
+(void)setPerformedPostRestoreSoftwareUpdate:(BOOL)arg1 ;
+(void)setShouldPerformAutomaticUpdates:(BOOL)arg1 ;
+(void)setLastAutoUpdatePerformDate:(id)arg1 ;
+(id)lastAutoUpdateCompletionDate;
+(void)setLastAutoUpdateCompletionDate:(id)arg1 ;
+(BOOL)useLaunchCountsForAppUsage;
+(id)powerPluggedInOverride;
+(void)clearRestoreDefaults;
+(void)recordOSMigrationDate;
+(void)recordOffloadingGracePeriodStartDateIfUnset;
+(id)maxConcurrentJobCount;
+(id)maxConcurrentThermalLimitedJobCount;
+(BOOL)thermalEnabled;
+(void)recordJobApprovalDate;
+(void)clearJobApprovalDate;
+(void)_setNullableValue:(void*)arg1 forKey:(CFStringRef)arg2 ;
+(BOOL)_boolForKey:(CFStringRef)arg1 applicationId:(CFStringRef)arg2 ifMissing:(BOOL)arg3 ;
+(id)_copyNumberForKey:(CFStringRef)arg1 applicationId:(CFStringRef)arg2 ;
+(void)recordMigratedAppUsageDB;
+(id)crossfireNextPostTargetDate;
+(id)crossfirePostIntervalSecondsOverride;
+(void)setCrossfireNextPostTargetDate:(id)arg1 ;
+(id)appUsageActorID;
+(id)appClusterMappingRefreshIntervalOverride;
+(id)appClusterMappingRefreshTargetDate;
+(BOOL)appTasteProfileEnabled;
+(BOOL)appUsageDBMigrated;
+(BOOL)appUsageEnableMetricsForActorIDSession;
+(id)appUsageNextPostTargetDate;
+(id)appUsagePostMetricsSamplingPercentageOverride;
+(id)appUsageResetActorIDOverride;
+(id)appUsageResetActorIDTargetDate;
+(id)appUsageTaskGracePeriodOverride;
+(void)clearAppUsageRecordMetricsForActorIDSession;
+(void)clearAppUsageIntervalStartDate;
+(void)clearAppUsageLaunchesIntervalStartDate;
+(void)setAppUsageActorID:(id)arg1 ;
+(void)setAppClusterMappingRefreshTargetDate:(id)arg1 ;
+(void)setAppUsageDBMigrated;
+(void)setAppUsageEnableMetricsForActorIDSession:(BOOL)arg1 ;
+(void)setAppUsageNextPostTargetDate:(id)arg1 ;
+(void)setAppUsageResetActorIDTargetDate:(id)arg1 ;
+(BOOL)marketingDemoMode;
+(id)offloadingGracePeriodStartDate;
+(void)setOcelotAppAnalyticsClientID:(id)arg1 ;
+(void)setOcelotApps:(id)arg1 ;
+(id)followUpAccounts;
+(void)setFollowUpAccounts:(id)arg1 ;
+(id)bulletinForKey:(CFStringRef)arg1 ;
+(void)clearDaemonCommsSemaphore;
+(BOOL)deamonCommsSemaphoreSet;
+(void)enableDeamonCommsSemaphore;
+(id)lastOSMigrationDate;
+(void)recordLastGarbageCollectDownloads;
+(void)recordLastJobCleanupDate;
+(void)setBulletins:(id)arg1 forKey:(CFStringRef)arg2 ;
+(BOOL)useArcadeSwitchUser;
+(id)claimHistory;
+(void)setClaimHistory:(id)arg1 ;
+(id)updateMigratorConfiguraton;
+(void)setUpdateMigratorConfiguration:(id)arg1 ;
+(void)clearUpdateMigrations;
+(void)setNextPostTargetDate:(id)arg1 forActivity:(id)arg2 ;
+(id)postIntervalSecondsOverrideForActivity:(id)arg1 ;
+(void)setOcelotPayoutResetDate:(id)arg1 ;
+(id)nextPostDateForActivity:(id)arg1 ;
+(id)lastOSBuildVersion;
+(void)setLastOSBuildVersion:(id)arg1 ;
+(id)restoreItemKinds;
+(void)setRestoreItemKinds:(id)arg1 ;
+(id)restoreItemsForKey:(CFStringRef)arg1 ;
+(void)setRestoreItemValue:(id)arg1 forKey:(CFStringRef)arg2 ;
@end

