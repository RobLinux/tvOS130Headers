/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:46:40 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/GGLLayerDelegate.h>
#import <VectorKit/MDRenderTarget.h>

@protocol GGLLayer, GGLRenderQueueSource;
@class CALayer, NSString;

@interface MDDisplayLayer : NSObject <GGLLayerDelegate, MDRenderTarget> {

	CALayer*<GGLLayer> _layer;
	id<GGLRenderQueueSource> _renderSource;
	shared_ptr<md::TaskContext>* _taskContext;
	RenderQueue* _activeRenderQueue;
	retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>* _sharedResources;
	deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()> > >* _completionHandlers;
	RenderTargetFormat _format;
	Device* _device;
	Renderer* _renderer;
	mutex _debugConsoleManagerCreationLock;
	unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager> >* _debugConsoleManager;
	unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> >* _renderTarget;
	unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> >* _depthStencil;
	unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> >* _msaaTexture;
	unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> >* _colorTextures[3];
	BOOL _useMultisampling;
	BOOL _requiresMultisampling;
	CGContextRef _snapshotContext;
	BOOL _readPixels;
	BOOL _shouldRasterize;
	CGRect _bounds;
	double _contentsScale;
	unsigned long long _signpostId;

}

@property (nonatomic,readonly) CALayer * layer;                                  //@synthesize layer=_layer - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic) CGSize size; 
@property (assign,nonatomic) double contentScale; 
@property (assign,nonatomic) CGRect bounds; 
@property (assign,nonatomic) id<GGLRenderQueueSource> renderSource;              //@synthesize renderSource=_renderSource - In the implementation block
@property (nonatomic,readonly) BOOL multiSample;                                 //@synthesize useMultisampling=_useMultisampling - In the implementation block
@property (nonatomic,readonly) const RenderTargetFormat* format; 
@property (nonatomic,readonly) Renderer* renderer; 
@property (nonatomic,readonly) BOOL shouldRasterize;                             //@synthesize shouldRasterize=_shouldRasterize - In the implementation block
@property (nonatomic,readonly) CGSize sizeInPixels; 
@property (nonatomic,readonly) RenderTarget* finalRenderTarget; 
@property (nonatomic,readonly) float averageFPS; 
-(void)dealloc;
-(CGSize)size;
-(const RenderTargetFormat*)format;
-(void)setSize:(CGSize)arg1 ;
-(void)setOpaque:(BOOL)arg1 ;
-(CGRect)bounds;
-(CALayer *)layer;
-(void)drawInContext:(CGContextRef)arg1 ;
-(void)setBounds:(CGRect)arg1 ;
-(CGPoint)convertPoint:(CGPoint)arg1 toLayer:(id)arg2 ;
-(void)setContentsGravity:(id)arg1 ;
-(void)setNeedsDisplayOnBoundsChange:(BOOL)arg1 ;
-(void)setBackgroundColor:(CGColorRef)arg1 ;
-(BOOL)shouldRasterize;
-(Renderer*)renderer;
-(void)didReceiveMemoryWarning;
-(double)contentScale;
-(CGSize)sizeInPixels;
-(RenderTarget*)finalRenderTarget;
-(void)setContentScale:(double)arg1 ;
-(void)didPresent;
-(void)didEnterBackground;
-(float)averageFPS;
-(DebugConsole*)debugConsoleForId:(int)arg1 ;
-(RenderQueue*)renderQueueForTimestamp:(double)arg1 ;
-(BOOL)multiSample;
-(void)destroyRenderTarget;
-(void)createRenderTarget;
-(BOOL)hasRenderTarget;
-(void)renderWithTimestamp:(double)arg1 completion:(function<void ()>*)arg2 ;
-(shared_ptr<ggl::BitmapDataBase>*)bitmapData;
-(id<GGLRenderQueueSource>)renderSource;
-(void)setRenderSource:(id<GGLRenderQueueSource>)arg1 ;
-(BOOL)isDelayedRenderQueueConsumptionSupported;
-(id)initWithContentScale:(double)arg1 shouldRasterize:(BOOL)arg2 taskContext:(const shared_ptr<md::TaskContext>*)arg3 device:(Device*)arg4 sharedResources:(id)arg5 signpostId:(unsigned long long)arg6 ;
-(void)enablePerformanceHUD:(id)arg1 ;
-(void)disablePerformanceHUD:(id)arg1 ;
-(void)expandedPerformanceHUD:(id)arg1 ;
-(RenderQueue*)_renderQueueForTimestamp:(double)arg1 prepareHandler:(/*^block*/id)arg2 ;
-(void)drawToTexture:(Texture*)arg1 withRenderQueue:(RenderQueue*)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)prepareTexture:(Texture*)arg1 ;
-(void)_didReadPixels:(shared_ptr<ggl::BitmapDataBase>*)arg1 ;
-(void)drawToTexture:(Texture*)arg1 withRenderQueue:(RenderQueue*)arg2 ;
-(void)willPresent;
-(void)willUpdateFrameTexture;
-(void)didUpdateFrameTexture;
@end

