/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:46:41 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class VKInternalIconManager, VKResourceManager, VKStateCaptureHandler, <VKNotificationObserverDelegate>, GEOFeatureStyleAttributes, VKRouteContext, VKCameraController, <VKCustomFeatureDataSource>, GEOVectorTileDecoder, VKSharedResources;

typedef struct retain_ptr<VKInternalIconManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	VKInternalIconManager* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<VKInternalIconManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct shared_ptr<md::TextureManager> {
	TextureManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::TextureManager>;

typedef struct retain_ptr<VKResourceManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	VKResourceManager* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<VKResourceManager *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct shared_ptr<md::StylesheetVendor> {
	StylesheetVendor __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::StylesheetVendor>;

typedef struct shared_ptr<md::DataOverrideManager> {
	DataOverrideManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::DataOverrideManager>;

typedef struct _compressed_pair<md::Device *, std::__1::default_delete<md::Device> > {
	Device __value_;
} compressed_pair<md::Device *, std::__1::default_delete<md::Device> >;

typedef struct unique_ptr<md::Device, std::__1::default_delete<md::Device> > {
	compressed_pair<md::Device *, std::__1::default_delete<md::Device> > __ptr_;
} unique_ptr<md::Device, std::__1::default_delete<md::Device> >;

typedef struct _compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> > {
	AlphaAtlas __value_;
} compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> >;

typedef struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas> > {
	compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> > __ptr_;
} unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas> >;

typedef struct _compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > {
	IsoAlphaAtlas __value_;
} compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> >;

typedef struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> > {
	compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > __ptr_;
} unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> >;

typedef struct _compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas> > {
	DistanceAtlas __value_;
} compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas> >;

typedef struct unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas> > {
	compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas> > __ptr_;
} unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas> >;

typedef struct shared_ptr<ggl::StandardLibrary> {
	StandardLibrary __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::StandardLibrary>;

typedef struct FigPhotoDecompressionSession* FigPhotoDecompressionSessionRef;

typedef struct shared_ptr<md::GeoResourceProvider> {
	GeoResourceProvider __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::GeoResourceProvider>;

typedef struct shared_ptr<grl::IconManager> {
	IconManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<grl::IconManager>;

typedef struct shared_ptr<grl::FontManager> {
	FontManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<grl::FontManager>;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > {
	StylesheetManager<gss::ScenePropertyID> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> >;

typedef struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > {
	StylesheetManager<gss::PropertyID> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<gss::StylesheetManager<gss::PropertyID> >;

typedef struct _compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/void* __value_;
} compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> >;

typedef struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> > __end_cap_;
} vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D> >;

typedef struct ManeveuverDistancesRange {
	double _immediate;
	double _extremlyNear;
	double _veryNear;
	double _near;
	double _medium;
	double _far;
	double _veryFar;
} ManeveuverDistancesRange;

typedef struct shared_ptr<md::TaskContext> {
	TaskContext __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::TaskContext>;

typedef struct {
	BOOL orthographic;
	double width;
	double height;
	double near;
	double far;
	double horizontalOffset;
} SCD_Struct_VK26;

typedef struct Matrix<double, 3, 1> {
	double _e[3];
} Matrix<double, 3, 1>;

typedef struct Unit<RadianUnitDescription, double> {
	double _value;
} Unit<RadianUnitDescription, double>;

typedef struct Quaternion<double> {
	Matrix<double, 3, 1> _imaginary;
	double _scalar;
} Quaternion<double>;

typedef struct RigidTransform<double, double> {
	Matrix<double, 3, 1> _translation;
	Quaternion<double> _rotation;
} RigidTransform<double, double>;

typedef struct Matrix<double, 4, 4> {
	double _e[16];
} Matrix<double, 4, 4>;

typedef struct optional<double> {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[8];
	d) type;
} optional<double>;

typedef struct _compressed_pair<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > {
	_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> __value_;
} compressed_pair<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >;

typedef struct vector<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > {
	_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> __begin_;
	_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> __end_;
	compressed_pair<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > __end_cap_;
} vector<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >;

typedef struct _compressed_pair<unsigned long, std::__1::less<VKPolylineGroupOverlay *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<VKPolylineGroupOverlay *> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<VKPolylineGroupOverlay *, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<VKPolylineGroupOverlay *, void *> > >;

typedef struct _tree<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<VKPolylineGroupOverlay *, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<VKPolylineGroupOverlay *> > __pair3_;
} tree<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *> >;

typedef struct set<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *> > {
	tree<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *> > __tree_;
} set<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *> >;

typedef struct Matrix<double, 2, 1> {
	double _e[2];
} Matrix<double, 2, 1>;

typedef struct Box<double, 2> {
	Matrix<double, 2, 1> _minimum;
	Matrix<double, 2, 1> _maximum;
} Box<double, 2>;

typedef struct VKFootprintConvexHull_struct {
	int edgeCount;
	Matrix<double, 3, 1> edgeOrigin[6];
	Matrix<double, 3, 1> edgeNormal[6];
} VKFootprintConvexHull_struct;

typedef struct optional<VKMapType> {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[4];
	i) type;
} optional<VKMapType>;

typedef struct {
	unsigned char timePeriod;
	unsigned char overlayType;
	unsigned char applicationState;
	unsigned char searchResultsType;
	BOOL mapHasLabels;
} SCD_Struct_VK44;

typedef struct VKEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} VKEdgeInsets;

typedef struct Unit<MeterUnitDescription, double> {
	double _value;
} Unit<MeterUnitDescription, double>;

typedef struct Coordinate3D<Radians, double> {
	Unit<RadianUnitDescription, double> latitude;
	Unit<RadianUnitDescription, double> longitude;
	Unit<MeterUnitDescription, double> altitude;
} Coordinate3D<Radians, double>;

typedef struct _compressed_pair<md::MapEngine *, std::__1::default_delete<md::MapEngine> > {
	MapEngine __value_;
} compressed_pair<md::MapEngine *, std::__1::default_delete<md::MapEngine> >;

typedef struct unique_ptr<md::MapEngine, std::__1::default_delete<md::MapEngine> > {
	compressed_pair<md::MapEngine *, std::__1::default_delete<md::MapEngine> > __ptr_;
} unique_ptr<md::MapEngine, std::__1::default_delete<md::MapEngine> >;

typedef struct retain_ptr<VKStateCaptureHandler *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	VKStateCaptureHandler* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<VKStateCaptureHandler *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct {
	BOOL field1;
} SCD_Struct_VK51;

typedef struct {
	double field1;
	double field2;
	double field3;
} SCD_Struct_VK52;

typedef struct CGContext* CGContextRef;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_VK54;

typedef struct {
	SCD_Struct_VK54 field1;
	SCD_Struct_VK54 field2;
} SCD_Struct_VK55;

typedef const struct shared_ptr<md::FeatureMarker>* shared_ptr<md::FeatureMarker>Ref;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct optional<float> {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[4];
	f) type;
} optional<float>;

typedef struct shared_ptr<md::OverlayContainer> {
	OverlayContainer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::OverlayContainer>;

typedef const struct bitset<4>* bitset<4>Ref;

typedef const struct shared_ptr<md::LabelMarker>* shared_ptr<md::LabelMarker>Ref;

typedef struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> {
	Allocator _allocator;
} StdAllocator<gss::FeatureAttributePair, gss::Allocator>;

typedef struct _compressed_pair<gss::FeatureAttributePair *, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator> > {
	FeatureAttributePair __value_;
	StdAllocator<gss::FeatureAttributePair, gss::Allocator> __value_;
} compressed_pair<gss::FeatureAttributePair *, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator> >;

typedef struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator> > {
	FeatureAttributePair __begin_;
	FeatureAttributePair __end_;
	compressed_pair<gss::FeatureAttributePair *, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator> > __end_cap_;
} vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator> >;

typedef struct FeatureAttributeSet {
	vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator> > _attributes;
} FeatureAttributeSet;

typedef struct shared_ptr<gss::StylesheetQuery<gss::PropertyID> > {
	StylesheetQuery<gss::PropertyID> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<gss::StylesheetQuery<gss::PropertyID> >;

typedef struct PolylineCoordinate {
	unsigned index;
	float offset;
} PolylineCoordinate;

typedef struct ViewSize {
	unsigned short width;
	unsigned short height;
} ViewSize;

typedef struct PerspectiveView<double> {
	RigidTransform<double, double> _transform;
	Matrix<double, 4, 4> _projectionMatrix;
	Matrix<double, 4, 4> _inverseProjection;
	Matrix<double, 4, 4> _matrix;
	double _ndcZNear;
	double _aspectRatio;
	ViewSize _size;
	int _type;
	Unit<RadianUnitDescription, double> _verticalFOV;
	double _near;
	double _far;
} PerspectiveView<double>;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct _value_func<void ()> {
	type __buf_;
	__base<void ()> __f_;
} value_func<void ()>;

typedef struct function<void ()> {
	value_func<void ()> __f_;
} function<void ()>;

typedef struct MapDataAccess* MapDataAccessRef;

typedef struct AnimationRunner* AnimationRunnerRef;

typedef struct RunLoopController* RunLoopControllerRef;

typedef struct _value_func<NSString *()> {
	type __buf_;
	__base<NSString *()> __f_;
} value_func<NSString *()>;

typedef struct function<NSString *()> {
	value_func<NSString *()> __f_;
} function<NSString *()>;

typedef struct CameraFrame<geo::Radians, double> {
	Coordinate3D<Radians, double> _target;
	Unit<MeterUnitDescription, double> _distanceFromTarget;
	Unit<RadianUnitDescription, double> _pitch;
	Unit<RadianUnitDescription, double> _heading;
	Unit<RadianUnitDescription, double> _roll;
} CameraFrame<geo::Radians, double>;

typedef struct Coordinate2D<Radians, double> {
	Unit<RadianUnitDescription, double> latitude;
	Unit<RadianUnitDescription, double> longitude;
} Coordinate2D<Radians, double>;

typedef struct Unit<DegreeUnitDescription, double> {
	double _value;
} Unit<DegreeUnitDescription, double>;

typedef struct opaque_pthread_rwlock_t {
	long long __sig;
	char __opaque[192];
} opaque_pthread_rwlock_t;

typedef struct read_write_lock {
	opaque_pthread_rwlock_t _lock;
} read_write_lock;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true> >;

typedef struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, void *>, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, void *>, mdm::Allocator>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, void *>, mdm::Allocator> > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
	StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, void *>, mdm::Allocator> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, void *>, mdm::Allocator> >;

typedef struct _tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true>, geo::StdAllocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, mdm::Allocator> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, void *>, mdm::Allocator> > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true> > __pair3_;
} tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true>, geo::StdAllocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, mdm::Allocator> >;

typedef struct map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> >, NSStringMapComparison, geo::StdAllocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, mdm::Allocator> > {
	tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, NSStringMapComparison, true>, geo::StdAllocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, mdm::Allocator> > __tree_;
} map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> >, NSStringMapComparison, geo::StdAllocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID> > >, mdm::Allocator> >;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_VK89;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _compressed_pair<mdc::DebugTreeProperty *, std::__1::allocator<mdc::DebugTreeProperty> > {
	DebugTreeProperty __value_;
} compressed_pair<mdc::DebugTreeProperty *, std::__1::allocator<mdc::DebugTreeProperty> >;

typedef struct vector<mdc::DebugTreeProperty, std::__1::allocator<mdc::DebugTreeProperty> > {
	DebugTreeProperty __begin_;
	DebugTreeProperty __end_;
	compressed_pair<mdc::DebugTreeProperty *, std::__1::allocator<mdc::DebugTreeProperty> > __end_cap_;
} vector<mdc::DebugTreeProperty, std::__1::allocator<mdc::DebugTreeProperty> >;

typedef struct _compressed_pair<mdc::DebugTreeNode *, std::__1::allocator<mdc::DebugTreeNode> > {
	DebugTreeNode __value_;
} compressed_pair<mdc::DebugTreeNode *, std::__1::allocator<mdc::DebugTreeNode> >;

typedef struct vector<mdc::DebugTreeNode, std::__1::allocator<mdc::DebugTreeNode> > {
	DebugTreeNode __begin_;
	DebugTreeNode __end_;
	compressed_pair<mdc::DebugTreeNode *, std::__1::allocator<mdc::DebugTreeNode> > __end_cap_;
} vector<mdc::DebugTreeNode, std::__1::allocator<mdc::DebugTreeNode> >;

typedef struct _short {
	char __data_[23];
	SCD_Struct_VK89 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __value_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct DebugTreeNode {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _name;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _identifier;
	vector<mdc::DebugTreeNode, std::__1::allocator<mdc::DebugTreeNode> > _children;
	vector<mdc::DebugTreeProperty, std::__1::allocator<mdc::DebugTreeProperty> > _properties;
} DebugTreeNode;

typedef struct Mercator2<double> {
	double _e[2];
} Mercator2<double>;

typedef struct shared_ptr<md::LabelStyle> {
	LabelStyle __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::LabelStyle>;

typedef struct _compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > > {
	Matrix<float, 2, 1> __value_;
} compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > >;

typedef struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1> > > {
	Matrix<float, 2, 1> __begin_;
	Matrix<float, 2, 1> __end_;
	compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > > __end_cap_;
} vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1> > >;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __value_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef struct optional<std::__1::vector<double, std::__1::allocator<double> > > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[24];
	vector<double, std::__1::allocator<double> >) type;
} optional<std::__1::vector<double, std::__1::allocator<double> > >;

typedef struct {
	Matrix<float, 2, 1> field1;
	Matrix<float, 2, 1> field2;
} SCD_Struct_VK107;

typedef struct __CFSet* CFSetRef;

typedef struct geo_weak_ptr<id<VKNotificationObserverDelegate> > {
	<VKNotificationObserverDelegate>* _p;
} geo_weak_ptr<id<VKNotificationObserverDelegate> >;

typedef struct Matrix<unsigned char, 4, 1> {
	unsigned char _e[4];
} Matrix<unsigned char, 4, 1>;

typedef struct Matrix<float, 2, 1> {
	float _e[2];
} Matrix<float, 2, 1>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true> >;

typedef struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator> {
	Allocator _allocator;
} StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator> > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
	StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator> >;

typedef struct _tree<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true>, geo::StdAllocator<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, grl::Allocator> > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, void *>, grl::Allocator> > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true>, geo::StdAllocator<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, grl::Allocator> >;

typedef struct map<unsigned short, std::__1::basic_string<char>, std::__1::less<unsigned short>, geo::StdAllocator<std::__1::pair<const unsigned short, std::__1::basic_string<char> >, grl::Allocator> > {
	tree<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, std::__1::less<unsigned short>, true>, geo::StdAllocator<std::__1::__value_type<unsigned short, std::__1::basic_string<char> >, grl::Allocator> > __tree_;
} map<unsigned short, std::__1::basic_string<char>, std::__1::less<unsigned short>, geo::StdAllocator<std::__1::pair<const unsigned short, std::__1::basic_string<char> >, grl::Allocator> >;

typedef struct optional<std::__1::basic_string<char> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[24];
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) type;
} optional<std::__1::basic_string<char> >;

typedef struct optional<gm::Matrix<float, 2, 1> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[8];
	Matrix<float, 2, 1>) type;
} optional<gm::Matrix<float, 2, 1> >;

typedef struct Color<unsigned char, 4, geo::ColorSpace::sRGB> {
	Matrix<unsigned char, 4, 1> _backing;
} Color<unsigned char, 4, geo::ColorSpace::sRGB>;

typedef struct optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[4];
	Color<unsigned char, 4, geo::ColorSpace::sRGB>) type;
} optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> >;

typedef struct IconModifiers {
	BOOL _isGlyphHidden;
	BOOL _isGlyphOnly;
	float _opacity;
	float _scale;
	optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > _textColor;
	optional<geo::Color<unsigned char, 4, geo::ColorSpace::sRGB> > _transitLineColor;
	optional<float> _fontSize;
	optional<float> _tailDirection;
	optional<float> _textBaseline;
	optional<gm::Matrix<float, 2, 1> > _fillSize;
	optional<std::__1::basic_string<char> > _fontName;
	map<unsigned short, std::__1::basic_string<char>, std::__1::less<unsigned short>, geo::StdAllocator<std::__1::pair<const unsigned short, std::__1::basic_string<char> >, grl::Allocator> > _text;
} IconModifiers;

typedef struct shared_ptr<grl::IconImage> {
	IconImage __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<grl::IconImage>;

typedef struct retain_ptr<CGColor *, geo::_retain_cf<CGColor *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> {
	/*function pointer*/void* _vptr$_retain_ptr;
	CGColor _obj;
	_retain_cf<CGColor *> _retain;
	_release_cf _release;
} retain_ptr<CGColor *, geo::_retain_cf<CGColor *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf>;

typedef struct CGImage* CGImageRef;

typedef struct CGColor* CGColorRef;

typedef struct StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator>;

typedef struct _compressed_pair<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> > {
	_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> __value_;
	StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> __value_;
} compressed_pair<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> >;

typedef struct vector<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> > {
	_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> __begin_;
	_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> __end_;
	compressed_pair<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> > __end_cap_;
} vector<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, mdm::Allocator> >;

typedef struct shared_ptr<md::Anchor> {
	Anchor __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::Anchor>;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct Coordinate2D<Degrees, double> {
	Unit<DegreeUnitDescription, double> latitude;
	Unit<DegreeUnitDescription, double> longitude;
} Coordinate2D<Degrees, double>;

typedef struct MercatorTile {
	unsigned char _level;
	int _latIdx;
	int _lonIdx;
} MercatorTile;

typedef struct LabelMarkerFeatureHandle {
	unsigned char featureType;
	long long featureIndex;
	MercatorTile key;
	int tileStyle;
	unsigned tileVersion;
	GEOFeatureStyleAttributes* styleAttributes;
} LabelMarkerFeatureHandle;

typedef struct _compressed_pair<AdditionalRouteInfo *, std::__1::allocator<AdditionalRouteInfo> > {
	AdditionalRouteInfo __value_;
} compressed_pair<AdditionalRouteInfo *, std::__1::allocator<AdditionalRouteInfo> >;

typedef struct vector<AdditionalRouteInfo, std::__1::allocator<AdditionalRouteInfo> > {
	AdditionalRouteInfo __begin_;
	AdditionalRouteInfo __end_;
	compressed_pair<AdditionalRouteInfo *, std::__1::allocator<AdditionalRouteInfo> > __end_cap_;
} vector<AdditionalRouteInfo, std::__1::allocator<AdditionalRouteInfo> >;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned matchingStyleAttributeLongValue : 1;
	unsigned anchorPointX : 1;
	unsigned anchorPointY : 1;
	unsigned iconRectHeight : 1;
	unsigned iconRectWidth : 1;
	unsigned iconRectX : 1;
	unsigned iconRectY : 1;
	unsigned matchingStyleAttributeKey : 1;
	unsigned matchingStyleAttributeValue : 1;
	unsigned size : 1;
} SCD_Struct_VK137;

typedef struct Range<unsigned long> {
	unsigned long long _min;
	unsigned long long _max;
} Range<unsigned long>;

typedef struct BufferMemory {
	ResourceAccessor _accessor;
	BufferData _user;
	Range<unsigned long> _range;
	int _access;
	int _sync;
	char* _data;
} BufferMemory;

typedef struct DataWrite<ggl::PolygonBase::CompressedVbo> {
	BufferMemory _memory;
} DataWrite<ggl::PolygonBase::CompressedVbo>;

typedef struct DataWrite<unsigned short> {
	BufferMemory _memory;
} DataWrite<unsigned short>;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > {
	shared_ptr<ggl::PolygonBase::CompressedMeshMesh> __value_;
} compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >;

typedef struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > {
	shared_ptr<ggl::PolygonBase::CompressedMeshMesh> __begin_;
	shared_ptr<ggl::PolygonBase::CompressedMeshMesh> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > >;

typedef struct _compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > {
	pair<unsigned short, unsigned int> __value_;
} compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >;

typedef struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > {
	pair<unsigned short, unsigned int> __begin_;
	pair<unsigned short, unsigned int> __end_;
	compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > __end_cap_;
} vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >;

typedef struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh> > > _meshes;
	DataWrite<ggl::PolygonBase::CompressedVbo> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>;

typedef struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[152];
	MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>) type;
} optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> >;

typedef struct _compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > {
	vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > __value_;
} compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > >;

typedef struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > {
	vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > __begin_;
	vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > __end_;
	compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > > __end_cap_;
} vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> >, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange> > > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > >;

typedef struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > __table_;
} unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<unsigned long long> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<unsigned long long> >;

typedef struct _compressed_pair<float, std::__1::equal_to<unsigned long long> > {
	float __value_;
} compressed_pair<float, std::__1::equal_to<unsigned long long> >;

typedef struct _hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> {
	__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > {
	hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >;

typedef struct _hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<unsigned long long> > __p2_;
	compressed_pair<float, std::__1::equal_to<unsigned long long> > __p3_;
} hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >;

typedef struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > {
	hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> > __table_;
} unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >;

typedef struct Matrix<float, 3, 1> {
	float _e[3];
} Matrix<float, 3, 1>;

typedef struct Box<float, 3> {
	Matrix<float, 3, 1> _minimum;
	Matrix<float, 3, 1> _maximum;
} Box<float, 3>;

typedef struct _compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher> > {
	Batcher __value_;
} compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher> >;

typedef struct vector<ggl::Batcher, std::__1::allocator<ggl::Batcher> > {
	Batcher __begin_;
	Batcher __end_;
	compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher> > __end_cap_;
} vector<ggl::Batcher, std::__1::allocator<ggl::Batcher> >;

typedef struct _compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > {
	shared_ptr<gss::StylesheetQuery<gss::PropertyID> > __value_;
} compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >;

typedef struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > {
	shared_ptr<gss::StylesheetQuery<gss::PropertyID> > __begin_;
	shared_ptr<gss::StylesheetQuery<gss::PropertyID> > __end_;
	compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > *, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > > __end_cap_;
} vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> >, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID> > > >;

typedef struct PolygonRouteAttributes {
	unsigned routeSignificance;
	unsigned char routeProximity;
	BOOL hasRouteSignificance;
} PolygonRouteAttributes;

typedef struct {
	id field1;
	char* field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned field7;
	unsigned long long field8;
	BOOL field9;
	unsigned long long field10;
	float field11;
	unsigned long long field12;
	id field13;
	int field14;
} SCD_Struct_VK177;

typedef struct {
	float field1;
	float field2;
} SCD_Struct_VK178;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_VK179;

typedef struct {
	SCD_Struct_VK178 field1;
	SCD_Struct_VK178 field2;
} SCD_Struct_VK180;

typedef struct {
	VKEdgeInsets field1;
	unsigned long long field2;
	unsigned long long field3;
	int field4;
	int field5;
	int field6;
	unsigned long long field7;
	unsigned long long( field8;
	/*function pointer*/void* field9;
	= field10;
	SCD_Struct_VK177 field11;
	SCD_Struct_VK179) field12;
	/*function pointer*/void* field13;
	SCD_Struct_VK180 field14;
	unsigned char field15;
	BOOL field16;
	unsigned char field17;
	BOOL field18;
	BOOL field19;
	unsigned char field20;
	BOOL field21;
	unsigned short field22;
	_ field23;
	N field24;
	unsigned short field25;
	R field26;
	a field27;
	n field28;
	g field29;
	e field30;
	BOOL field31;
	unsigned field32;
} SCD_Struct_VK181;

typedef struct {
	Matrix<double, 3, 1> position;
	Matrix<double, 3, 1> tangent;
	BOOL tangentValid;
} SCD_Struct_VK182;

typedef struct {
	double mb[4][3];
} SCD_Struct_VK183;

typedef struct {
	Matrix<double, 3, 1> field1;
	Matrix<double, 3, 1> field2;
	BOOL field3;
} SCD_Struct_VK184;

typedef struct {
	float _a;
	unsigned _b;
	unsigned _g;
	unsigned _r;
} SCD_Struct_VK185;

typedef struct {
	unsigned offsetX : 1;
	unsigned offsetY : 1;
} SCD_Struct_VK186;

typedef struct {
	SCD_Struct_VK185 _color;
	float _offsetX;
	float _offsetY;
	float _size;
	SCD_Struct_VK186 _has;
} SCD_Struct_VK187;

typedef struct {
	unsigned field1 : 1;
	unsigned field2 : 1;
	unsigned field3 : 1;
	unsigned field4 : 1;
	unsigned field5 : 1;
} SCD_Struct_VK188;

typedef struct {
	unsigned field1;
	int field2;
	int field3;
	float field4;
	unsigned field5;
	SCD_Struct_VK188 field6;
} SCD_Struct_VK189;

typedef struct {
	SCD_Struct_VK185 _color;
	float _width;
} SCD_Struct_VK190;

typedef struct {
	float list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VK191;

typedef struct {
	unsigned textShadow : 1;
	unsigned textStroke : 1;
	unsigned fontColor : 1;
	unsigned nonDigitFontColor : 1;
	unsigned atlasIndex : 1;
	unsigned backgroundColor : 1;
	unsigned borderColor : 1;
	unsigned capWidthLeft : 1;
	unsigned capWidthRight : 1;
	unsigned centerOffsetX : 1;
	unsigned fontSize : 1;
	unsigned lineSpacing : 1;
	unsigned maxDigits : 1;
	unsigned minDigits : 1;
	unsigned nonDigitFontSize : 1;
	unsigned paddingLeft : 1;
	unsigned paddingRight : 1;
	unsigned quadIndex : 1;
	unsigned textBaseline : 1;
	unsigned textMaskColor : 1;
} SCD_Struct_VK192;

typedef struct {
	SCD_Struct_VK185 field1;
	float field2;
} SCD_Struct_VK193;

typedef struct {
	SCD_Struct_VK185 field1;
	float field2;
	float field3;
	float field4;
	SCD_Struct_VK186 field5;
} SCD_Struct_VK194;

typedef struct retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	VKRouteContext* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct {
	unsigned backgroundColor : 1;
	unsigned borderColor : 1;
	unsigned style : 1;
	unsigned textColor : 1;
	unsigned textDropShadowColor : 1;
	unsigned textDropShadowSize : 1;
	unsigned textStrokeColor : 1;
	unsigned textStrokeSize : 1;
} SCD_Struct_VK196;

typedef struct __CTLine* CTLineRef;

typedef struct __CTFrame* CTFrameRef;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct RoadSignMetrics {
	unsigned char _orientation;
	double _scale;
	double _contentScale;
	double _arrowWeight;
	double _arrowLength;
	CGSize _shadowOffset;
	double _shadowRadius;
	double _strokeWeight;
	double _innerStrokeWeight;
	double _signHeight;
	double _signMargin;
	double _horizontalMargin;
	double _verticalMargin;
	double _cornerRadius;
	CGSize _glyphSize;
} RoadSignMetrics;

typedef struct StdAllocator<char, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<char, mdm::Allocator>;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >::__rep, geo::StdAllocator<char, mdm::Allocator> > {
	const ep __value_;
	StdAllocator<char, mdm::Allocator> __value_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >::__rep, geo::StdAllocator<char, mdm::Allocator> >;

typedef struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >::__rep, geo::StdAllocator<char, mdm::Allocator> > __r_;
} basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >;

typedef struct RoadSignTextMetrics {
	double _scale;
	double _contentScale;
	double _horizontalMargin;
	double _verticalMargin;
	double _verticalOffset;
	double _textSize;
	basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > _fontFamily;
	double _textDrawWidth;
	double _textWrapWidth;
} RoadSignTextMetrics;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct RoadSignPartMetrics {
	unsigned char _type;
	CGSize _imageSize;
	CGRect _signBaseRect;
	double _topEmptySpaceHeight;
	double _bottomEmptySpaceHeight;
	double _leftEmptySpaceWidth;
	double _rightEmptySpaceWidth;
	double _outsideImagePathExtension;
	BOOL _hasArrows;
	CGPoint _arrowWingMin;
	CGPoint _arrowWingMax;
	CGPoint _arrowTip;
} RoadSignPartMetrics;

typedef struct RoadSignGeneratedMetrics {
	RoadSignPartMetrics _leftRoadSignPartMetrics;
	RoadSignPartMetrics _rightRoadSignPartMetrics;
	RoadSignPartMetrics _stretchedRoadSignPartMetrics;
	RoadSignPartMetrics _middleRoadSignPartMetrics;
	BOOL _hasMiddleSignPart;
	CGSize _imageSize;
	CGRect _signBaseRect;
	CGRect _glyphRect;
	double _stretchedRoadSignPartWidth;
	CGPoint _arrowTipPosition;
	CGPoint _textPosition;
	CGRect _textBounds;
	CGRect _leftPartRect;
	CGRect _rightPartRect;
	CGRect _stretchedPartRect;
	CGRect _middlePartRect;
	CGRect _middleLeftStretchedPartRect;
	CGRect _middleRightStretchedPartRect;
} RoadSignGeneratedMetrics;

typedef struct Matrix<double, 4, 1> {
	double _e[4];
} Matrix<double, 4, 1>;

typedef struct Color<double, 4, geo::ColorSpace::Linear> {
	Matrix<double, 4, 1> _backing;
} Color<double, 4, geo::ColorSpace::Linear>;

typedef struct array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2> {
	Color<double, 4, geo::ColorSpace::Linear> __elems_[2];
} array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2>;

typedef struct RoadSignColoring {
	BOOL _hasFillColor;
	BOOL _hasGradientFillColors;
	BOOL _hasGradientFillAngle;
	BOOL _hasStrokeColor;
	BOOL _hasInnerStrokeColor;
	BOOL _hasShadowColor;
	BOOL _hasTextColor;
	Color<double, 4, geo::ColorSpace::Linear> _fillColor;
	array<geo::Color<double, 4, geo::ColorSpace::Linear>, 2> _gradientFillColors;
	Color<double, 4, geo::ColorSpace::Linear> _strokeColor;
	Color<double, 4, geo::ColorSpace::Linear> _innerStrokeColor;
	Color<double, 4, geo::ColorSpace::Linear> _shadowColor;
	Color<double, 4, geo::ColorSpace::Linear> _textColor;
	double _gradientFillAngle;
} RoadSignColoring;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > >;

typedef struct multimap<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > > {
	tree<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > > __tree_;
} multimap<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > >;

typedef struct {
	id field1;
	PolylineCoordinate field2;
	PolylineCoordinate field3;
} SCD_Struct_VK216;

typedef struct StringWithLocale {
	basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > text;
	basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > locale;
} StringWithLocale;

typedef struct LabelExternalTextElement {
	unsigned char minZoom;
	unsigned char textType;
	StringWithLocale text;
	StringWithLocale localizedText;
} LabelExternalTextElement;

typedef struct LabelExternalIconElement {
	Matrix<float, 2, 1> size;
	Matrix<float, 2, 1> anchorPoint;
	BOOL isRound;
	unsigned char minZoom;
} LabelExternalIconElement;

typedef struct shared_ptr<md::LabelExternalPointFeature> {
	LabelExternalPointFeature __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::LabelExternalPointFeature>;

typedef struct DebugConsole* DebugConsoleRef;

typedef struct RenderTargetFormat {
	int colorFormats[4];
	unsigned long long colorFormatsCount;
	unsigned samples;
	int depthStencilFormat;
} RenderTargetFormat;

typedef struct _compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture> > {
	IOSurfaceTexture __value_;
} compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture> >;

typedef struct unique_ptr<ggl::IOSurfaceTexture, std::__1::default_delete<ggl::IOSurfaceTexture> > {
	compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture> > __ptr_;
} unique_ptr<ggl::IOSurfaceTexture, std::__1::default_delete<ggl::IOSurfaceTexture> >;

typedef struct _compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > {
	RenderTarget __value_;
} compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> >;

typedef struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> > {
	compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > __ptr_;
} unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> >;

typedef struct _compressed_pair<(anonymous namespace)::YFlipPass *, std::__1::default_delete<(anonymous namespace)::YFlipPass> > {
	YFlipPass __value_;
} compressed_pair<(anonymous namespace)::YFlipPass *, std::__1::default_delete<(anonymous namespace)::YFlipPass> >;

typedef struct unique_ptr<(anonymous namespace)::YFlipPass, std::__1::default_delete<(anonymous namespace)::YFlipPass> > {
	compressed_pair<(anonymous namespace)::YFlipPass *, std::__1::default_delete<(anonymous namespace)::YFlipPass> > __ptr_;
} unique_ptr<(anonymous namespace)::YFlipPass, std::__1::default_delete<(anonymous namespace)::YFlipPass> >;

typedef struct shared_ptr<ggl::Device> {
	Device __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Device>;

typedef struct _compressed_pair<ggl::Texture *, std::__1::default_delete<ggl::Texture> > {
	Texture __value_;
} compressed_pair<ggl::Texture *, std::__1::default_delete<ggl::Texture> >;

typedef struct unique_ptr<ggl::Texture, std::__1::default_delete<ggl::Texture> > {
	compressed_pair<ggl::Texture *, std::__1::default_delete<ggl::Texture> > __ptr_;
} unique_ptr<ggl::Texture, std::__1::default_delete<ggl::Texture> >;

typedef struct _compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > {
	RenderBuffer __value_;
} compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> >;

typedef struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> > {
	compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > __ptr_;
} unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> >;

typedef struct retain_ptr<VKCameraController *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	VKCameraController* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<VKCameraController *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct DisplayStyle {
	unsigned char timePeriod;
	unsigned char overlayType;
	unsigned char applicationState;
	unsigned char searchResultsType;
	unsigned char mapHasLabels;
} DisplayStyle;

typedef struct _compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > > {
	fast_shared_ptr<md::RouteLineSection, std::allocator> __value_;
} compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > >;

typedef struct vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > > {
	fast_shared_ptr<md::RouteLineSection, std::allocator> __begin_;
	fast_shared_ptr<md::RouteLineSection, std::allocator> __end_;
	compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > > __end_cap_;
} vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > >;

typedef struct fast_shared_ptr<md::RouteLineSection, std::allocator> {
	_fast_shared_ptr_control _control;
} fast_shared_ptr<md::RouteLineSection, std::allocator>;

typedef struct _compressed_pair<md::ManeuverArrowInfo *, std::__1::allocator<md::ManeuverArrowInfo> > {
	ManeuverArrowInfo __value_;
} compressed_pair<md::ManeuverArrowInfo *, std::__1::allocator<md::ManeuverArrowInfo> >;

typedef struct vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo> > {
	ManeuverArrowInfo __begin_;
	ManeuverArrowInfo __end_;
	compressed_pair<md::ManeuverArrowInfo *, std::__1::allocator<md::ManeuverArrowInfo> > __end_cap_;
} vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo> >;

typedef struct ManeuverArrowCoordinates {
	vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo> > _maneuverArrows;
} ManeuverArrowCoordinates;

typedef struct shared_ptr<md::TextureAtlasRegion> {
	TextureAtlasRegion __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::TextureAtlasRegion>;

typedef struct Box<float, 2> {
	Matrix<float, 2, 1> _minimum;
	Matrix<float, 2, 1> _maximum;
} Box<float, 2>;

typedef struct atomic<bool> {
	AB __a_;
} atomic<bool>;

typedef struct _compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *> > >;

typedef struct _tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::shared_ptr<md::RouteLineData>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<std::__1::shared_ptr<md::RouteLineData> > > __pair3_;
} tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > >;

typedef struct set<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > {
	tree<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > > __tree_;
} set<std::__1::shared_ptr<md::RouteLineData>, std::__1::less<std::__1::shared_ptr<md::RouteLineData> >, std::__1::allocator<std::__1::shared_ptr<md::RouteLineData> > >;

typedef struct _compressed_pair<unsigned long, md::MultiRectSetCompare> {
	unsigned long long __value_;
} compressed_pair<unsigned long, md::MultiRectSetCompare>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *> > >;

typedef struct _tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *> > > __pair1_;
	compressed_pair<unsigned long, md::MultiRectSetCompare> __pair3_;
} tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > >;

typedef struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > {
	tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > __tree_;
} set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > >;

typedef struct MultiRectRegion {
	set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2> > > _rects;
} MultiRectRegion;

typedef struct _compressed_pair<md::TrafficSegmentsAlongRoute *, std::__1::default_delete<md::TrafficSegmentsAlongRoute> > {
	TrafficSegmentsAlongRoute __value_;
} compressed_pair<md::TrafficSegmentsAlongRoute *, std::__1::default_delete<md::TrafficSegmentsAlongRoute> >;

typedef struct unique_ptr<md::TrafficSegmentsAlongRoute, std::__1::default_delete<md::TrafficSegmentsAlongRoute> > {
	compressed_pair<md::TrafficSegmentsAlongRoute *, std::__1::default_delete<md::TrafficSegmentsAlongRoute> > __ptr_;
} unique_ptr<md::TrafficSegmentsAlongRoute, std::__1::default_delete<md::TrafficSegmentsAlongRoute> >;

typedef struct _compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > >;

typedef struct _tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<VKRouteOverlay>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<id<VKRouteOverlay> > > __pair3_;
} tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > >;

typedef struct set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > {
	tree<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > > __tree_;
} set<id<VKRouteOverlay>, std::__1::less<id<VKRouteOverlay> >, std::__1::allocator<id<VKRouteOverlay> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > >;

typedef struct _tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> > __pair3_;
} tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > >;

typedef struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > > {
	tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > > __tree_;
} map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > >;

typedef struct GEOTileSetRegion {
	unsigned _maxX;
	unsigned _maxY;
	unsigned _maxZ;
	unsigned _minX;
	unsigned _minY;
	unsigned _minZ;
} GEOTileSetRegion;

typedef struct _compressed_pair<(anonymous namespace)::CustomLandmarksContainer *, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer> > {
	CustomLandmarksContainer __value_;
} compressed_pair<(anonymous namespace)::CustomLandmarksContainer *, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer> >;

typedef struct unique_ptr<(anonymous namespace)::CustomLandmarksContainer, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer> > {
	compressed_pair<(anonymous namespace)::CustomLandmarksContainer *, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer> > __ptr_;
} unique_ptr<(anonymous namespace)::CustomLandmarksContainer, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer> >;

typedef struct {
	BOOL borders;
	BOOL folds;
	BOOL angles;
	float minAngle;
	float maxAngle;
} SCD_Struct_VK267;

typedef struct shared_ptr<md::LabelTile> {
	LabelTile __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::LabelTile>;

typedef struct {
	unsigned field1;
	unsigned field2;
	/*function pointer*/void* field3;
} SCD_Struct_VK269;

typedef struct StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator>;

typedef struct _compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > {
	Matrix<double, 2, 1> __value_;
	StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> __value_;
} compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> >;

typedef struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > {
	Matrix<double, 2, 1> __begin_;
	Matrix<double, 2, 1> __end_;
	compressed_pair<gm::Matrix<double, 2, 1> *, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> > __end_cap_;
} vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, mdm::Allocator> >;

typedef struct {
	/*function pointer*/void* field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	/*function pointer*/void* field6;
	/*function pointer*/void* field7;
} SCD_Struct_VK273;

typedef struct _compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > >;

typedef struct _compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > > {
	float __value_;
} compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > >;

typedef struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator>;

typedef struct StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> > {
	hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> __value_;
	StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> >;

typedef struct _compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > {
	unsigned long long __value_;
	StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> __value_;
} compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> >;

typedef struct _bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > {
	compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > __data_;
} bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> __value_;
	bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > >;

typedef struct _hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *> *, mdm::Allocator> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelTile>, void *>, mdm::Allocator> > __p1_;
	compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelTile> > > __p2_;
	compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> > > __p3_;
} hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> >;

typedef struct unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > {
	hash_table<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> > __table_;
} unordered_set<std::__1::shared_ptr<md::LabelTile>, std::__1::hash<std::__1::shared_ptr<md::LabelTile> >, std::__1::equal_to<std::__1::shared_ptr<md::LabelTile> >, geo::StdAllocator<std::__1::shared_ptr<md::LabelTile>, mdm::Allocator> >;

typedef struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator>;

typedef struct _compressed_pair<std::__1::shared_ptr<md::NavLabel> *, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> > {
	shared_ptr<md::NavLabel> __value_;
	StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> __value_;
} compressed_pair<std::__1::shared_ptr<md::NavLabel> *, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> >;

typedef struct vector<std::__1::shared_ptr<md::NavLabel>, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> > {
	shared_ptr<md::NavLabel> __begin_;
	shared_ptr<md::NavLabel> __end_;
	compressed_pair<std::__1::shared_ptr<md::NavLabel> *, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> > __end_cap_;
} vector<std::__1::shared_ptr<md::NavLabel>, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, mdm::Allocator> >;

typedef struct shared_ptr<md::NavCurrentRoadSign> {
	NavCurrentRoadSign __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::NavCurrentRoadSign>;

typedef struct StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator>;

typedef struct _compressed_pair<VKLabelNavRoadLabel **, geo::StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator> > {
	id __value_;
	StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator> __value_;
} compressed_pair<VKLabelNavRoadLabel **, geo::StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator> >;

typedef struct vector<VKLabelNavRoadLabel *, geo::StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator> > {
	id __begin_;
	id __end_;
	compressed_pair<VKLabelNavRoadLabel **, geo::StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator> > __end_cap_;
} vector<VKLabelNavRoadLabel *, geo::StdAllocator<VKLabelNavRoadLabel *, mdm::Allocator> >;

typedef struct Geocentric<double> {
	double _e[3];
} Geocentric<double>;

typedef struct {
	CGSize origin;
	CGSize size;
} SCD_Struct_VK294;

typedef struct retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	<VKCustomFeatureDataSource>* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct retain_ptr<GEOVectorTileDecoder *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	GEOVectorTileDecoder* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<GEOVectorTileDecoder *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyHashFunc, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyHashFunc, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyEqualsFunc, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyEqualsFunc, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyHashFunc, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyEqualsFunc, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyHashFunc, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyEqualsFunc, true> > __p3_;
} hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyHashFunc, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyEqualsFunc, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >;

typedef struct unordered_map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyHashFunc, GEOTileKeyEqualsFunc, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > {
	hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyHashFunc, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyEqualsFunc, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > __table_;
} unordered_map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyHashFunc, GEOTileKeyEqualsFunc, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >;

typedef struct Mutex {
	void mMutex;
} Mutex;

typedef struct Matrix<int, 2, 1> {
	int _e[2];
} Matrix<int, 2, 1>;

typedef struct CameraManager {
	/*function pointer*/void* _vptr$CameraManager;
	BOOL _panBegin;
	BOOL _panInProgress;
	BOOL _panEnd;
	Matrix<int, 2, 1> _panCurrentCursor;
	Matrix<int, 2, 1> _panPreviousCursor;
	Matrix<int, 2, 1> _panStartCursor;
	Coordinate3D<Radians, double> _panStartPosition;
	double _panDistance;
	BOOL _panAtStartPosition;
	BOOL _rotateBegin;
	BOOL _rotateInProgress;
	BOOL _rotateEnd;
	Coordinate3D<Radians, double> _rotateStartPosition;
	Matrix<int, 2, 1> _rotateCurrentCursor;
	double _rotateAngle;
	BOOL _tiltBegin;
	BOOL _tiltInProgress;
	BOOL _tiltEnd;
	Coordinate3D<Radians, double> _tiltStartPosition;
	Matrix<int, 2, 1> _tiltCurrentCursor;
	Matrix<int, 2, 1> _tiltPreviousCursor;
	double _tiltAngle;
	BOOL _zoomBegin;
	BOOL _zoomInProgress;
	BOOL _zoomEnd;
	Coordinate3D<Radians, double> _zoomStartPosition;
	Matrix<int, 2, 1> _zoomCurrentCursor;
	double _zoomFactor;
	double _zoomStartDistance;
	BOOL _zoomRotateToNorth;
	BOOL _useTiltLimit;
	int _tiltLimitMode;
	BOOL _tiltLimitPushDownEnabled;
	BOOL _tiltLimitTransferInProgress;
	BOOL _tiltLimitPushDown;
	double _startPushDownTilt;
	double _tiltLimitTransferFraction;
	double _startTiltLimitTilt;
	Geocentric<double> _startTiltLimitPosition;
	Matrix<double, 3, 1> _startTiltLimitDirection;
	double _fullZoomTiltLimitFactor;
	Box<double, 2> _singleRestriction;
	Box<double, 2> _westOfDatelineRestriction;
	Box<double, 2> _eastOfDatelineRestriction;
} CameraManager;

typedef struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> {
	BufferMemory _memory;
} DataWrite<ggl::BuildingFlatStroke::DefaultVbo>;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > {
	shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> __value_;
} compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >;

typedef struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > {
	shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> __begin_;
	shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > >;

typedef struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> > > _meshes;
	DataWrite<ggl::BuildingFlatStroke::DefaultVbo> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>;

typedef struct optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[152];
	MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>) type;
} optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> >;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > > {
	MeshVendor<ggl::BuildingFacade::BuildingMesh> __value_;
} compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh> > >;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > {
	MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> __value_;
} compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > >;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > {
	MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> __value_;
} compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > >;

typedef struct {
	SCD_Struct_VK181 field1;
	unsigned long long field2;
	unsigned long long field3;
	BOOL field4;
	BOOL field5;
} SCD_Struct_VK321;

typedef struct {
	SCD_Struct_VK177 field1;
	SCD_Struct_VK178 field2;
	float field3;
	SCD_Struct_VK178 field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned long long field7;
	unsigned long long field8;
	short field9;
	short field10;
	unsigned char field11;
	float field12;
	float field13;
	unsigned field14;
	unsigned char field15;
	BOOL field16;
	BOOL field17;
	BOOL field18;
	BOOL field19;
	BOOL field20;
} SCD_Struct_VK322;

typedef struct retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	VKSharedResources* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()> > >;

typedef struct _compressed_pair<std::__1::function<void ()> **, std::__1::allocator<std::__1::function<void ()> *> > {
	function<void ()> __value_;
} compressed_pair<std::__1::function<void ()> **, std::__1::allocator<std::__1::function<void ()> *> >;

typedef struct _split_buffer<std::__1::function<void ()> *, std::__1::allocator<std::__1::function<void ()> *> > {
	function<void ()> __first_;
	function<void ()> __begin_;
	function<void ()> __end_;
	compressed_pair<std::__1::function<void ()> **, std::__1::allocator<std::__1::function<void ()> *> > __end_cap_;
} split_buffer<std::__1::function<void ()> *, std::__1::allocator<std::__1::function<void ()> *> >;

typedef struct deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()> > > {
	split_buffer<std::__1::function<void ()> *, std::__1::allocator<std::__1::function<void ()> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()> > > __size_;
} deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()> > >;

typedef struct _compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> > {
	DebugConsoleManager __value_;
} compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> >;

typedef struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager> > {
	compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> > __ptr_;
} unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::Anchor *, float>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::Anchor *, float>, void *> > >;

typedef struct _tree<std::__1::__value_type<md::Anchor *, float>, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<md::Anchor *, float> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::Anchor *, float>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true> > __pair3_;
} tree<std::__1::__value_type<md::Anchor *, float>, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<md::Anchor *, float> > >;

typedef struct map<md::Anchor *, float, std::__1::less<md::Anchor *>, std::__1::allocator<std::__1::pair<md::Anchor *const, float> > > {
	tree<std::__1::__value_type<md::Anchor *, float>, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<md::Anchor *, float> > > __tree_;
} map<md::Anchor *, float, std::__1::less<md::Anchor *>, std::__1::allocator<std::__1::pair<md::Anchor *const, float> > >;

typedef struct _compressed_pair<geo::Mercator2<double> *, std::__1::allocator<geo::Mercator2<double> > > {
	Mercator2<double> __value_;
} compressed_pair<geo::Mercator2<double> *, std::__1::allocator<geo::Mercator2<double> > >;

typedef struct vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > {
	Mercator2<double> __begin_;
	Mercator2<double> __end_;
	compressed_pair<geo::Mercator2<double> *, std::__1::allocator<geo::Mercator2<double> > > __end_cap_;
} vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > >;

typedef struct Range<signed char> {
	char _min;
	char _max;
} Range<signed char>;

typedef struct _compressed_pair<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> > > {
	Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> __value_;
} compressed_pair<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> > >;

typedef struct unique_ptr<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> > > {
	compressed_pair<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> *, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> > > __ptr_;
} unique_ptr<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy>, std::__1::default_delete<geo::Cache<unsigned char, std::__1::shared_ptr<std::__1::vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double> > > >, std::__1::hash<unsigned char>, LRUPolicy> > >;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct unfair_lock {
	os_unfair_lock_s _lock;
} unfair_lock;

typedef struct shared_ptr<md::PolylineOverlayStyle> {
	PolylineOverlayStyle __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::PolylineOverlayStyle>;

typedef struct shared_ptr<md::CircleOverlayRenderable> {
	CircleOverlayRenderable __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::CircleOverlayRenderable>;

typedef struct shared_ptr<md::CircleOverlayRenderable::Style> {
	Style __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::CircleOverlayRenderable::Style>;

typedef struct shared_ptr<geo::Polygon2<double> > {
	Polygon2<double> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::Polygon2<double> >;

typedef struct shared_ptr<md::PolygonOverlayRenderable::Style> {
	Style __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::PolygonOverlayRenderable::Style>;

typedef struct {
	unsigned variantType : 1;
} SCD_Struct_VK346;

typedef struct shared_ptr<md::NavLabel> {
	NavLabel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::NavLabel>;

typedef struct StdAllocator<LabelNavJunctionInfo, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<LabelNavJunctionInfo, mdm::Allocator>;

typedef struct _compressed_pair<LabelNavJunctionInfo *, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator> > {
	LabelNavJunctionInfo __value_;
	StdAllocator<LabelNavJunctionInfo, mdm::Allocator> __value_;
} compressed_pair<LabelNavJunctionInfo *, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator> >;

typedef struct vector<LabelNavJunctionInfo, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator> > {
	LabelNavJunctionInfo __begin_;
	LabelNavJunctionInfo __end_;
	compressed_pair<LabelNavJunctionInfo *, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator> > __end_cap_;
} vector<LabelNavJunctionInfo, geo::StdAllocator<LabelNavJunctionInfo, mdm::Allocator> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> >;

typedef struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator>;

typedef struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator> > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> __value_;
	StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator> >;

typedef struct _compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > {
	unsigned long long __value_;
	StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> __value_;
} compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> >;

typedef struct _bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > {
	compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > __data_;
} bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> __value_;
	bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> **, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, mdm::Allocator> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *> *, mdm::Allocator> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, void *>, mdm::Allocator> > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, mdm::Allocator> >;

typedef struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, geo::StdAllocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, mdm::Allocator> > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, mdm::Allocator> > __table_;
} unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> > >, geo::StdAllocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, mdm::Allocator> >, std::__1::shared_ptr<NavRoadFeature> >, mdm::Allocator> >;

typedef struct StdAllocator<RouteSegment, mdm::Allocator> {
	Allocator _allocator;
} StdAllocator<RouteSegment, mdm::Allocator>;

typedef struct _compressed_pair<RouteSegment *, geo::StdAllocator<RouteSegment, mdm::Allocator> > {
	RouteSegment __value_;
	StdAllocator<RouteSegment, mdm::Allocator> __value_;
} compressed_pair<RouteSegment *, geo::StdAllocator<RouteSegment, mdm::Allocator> >;

typedef struct vector<RouteSegment, geo::StdAllocator<RouteSegment, mdm::Allocator> > {
	RouteSegment __begin_;
	RouteSegment __end_;
	compressed_pair<RouteSegment *, geo::StdAllocator<RouteSegment, mdm::Allocator> > __end_cap_;
} vector<RouteSegment, geo::StdAllocator<RouteSegment, mdm::Allocator> >;

typedef struct _compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > {
	Matrix<double, 2, 1> __value_;
} compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >;

typedef struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > {
	Matrix<double, 2, 1> __begin_;
	Matrix<double, 2, 1> __end_;
	compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > __end_cap_;
} vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >;

typedef struct DataWrite<ggl::VenueWall::DefaultVbo> {
	BufferMemory _memory;
} DataWrite<ggl::VenueWall::DefaultVbo>;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > {
	shared_ptr<ggl::VenueWall::MeshMesh> __value_;
} compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >;

typedef struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > {
	shared_ptr<ggl::VenueWall::MeshMesh> __begin_;
	shared_ptr<ggl::VenueWall::MeshMesh> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >;

typedef struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > > _meshes;
	DataWrite<ggl::VenueWall::DefaultVbo> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>;

typedef struct optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[152];
	MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>) type;
} optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> >;

typedef struct DataWrite<ggl::VenueWall::EndCapVbo> {
	BufferMemory _memory;
} DataWrite<ggl::VenueWall::EndCapVbo>;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > {
	shared_ptr<ggl::VenueWall::EndCapMesh> __value_;
} compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >;

typedef struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > {
	shared_ptr<ggl::VenueWall::EndCapMesh> __begin_;
	shared_ptr<ggl::VenueWall::EndCapMesh> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >;

typedef struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > > _meshes;
	DataWrite<ggl::VenueWall::EndCapVbo> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>;

typedef struct optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[152];
	MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>) type;
} optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> >;

typedef struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> {
	BufferMemory _memory;
} DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo>;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > {
	shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> __value_;
} compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >;

typedef struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > {
	shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> __begin_;
	shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >;

typedef struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > > _meshes;
	DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>;

typedef struct optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[152];
	MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>) type;
} optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> >;

typedef struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> {
	BufferMemory _memory;
} DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo>;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > {
	shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> __value_;
} compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >;

typedef struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > {
	shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> __begin_;
	shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >;

typedef struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > > _meshes;
	DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>;

typedef struct optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[152];
	MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>) type;
} optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> >;

typedef struct shared_ptr<ggl::Texture2D> {
	Texture2D __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Texture2D>;

typedef struct {
	double latitude;
	double longitude;
	double altitude;
} SCD_Struct_VK389;

typedef struct _value_func<void (GEOResourceManifestManager *)> {
	type __buf_;
	__base<void (GEOResourceManifestManager *)> __f_;
} value_func<void (GEOResourceManifestManager *)>;

typedef struct function<void (GEOResourceManifestManager *)> {
	value_func<void (GEOResourceManifestManager *)> __f_;
} function<void (GEOResourceManifestManager *)>;

typedef struct _value_func<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
	type __buf_;
	__base<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> __f_;
} value_func<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)>;

typedef struct function<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> {
	value_func<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)> __f_;
} function<void (GEOResourceManifestManager *, GEOActiveTileGroup *, GEOActiveTileGroup *)>;

typedef struct _value_func<void (GEOExperimentConfiguration *)> {
	type __buf_;
	__base<void (GEOExperimentConfiguration *)> __f_;
} value_func<void (GEOExperimentConfiguration *)>;

typedef struct function<void (GEOExperimentConfiguration *)> {
	value_func<void (GEOExperimentConfiguration *)> __f_;
} function<void (GEOExperimentConfiguration *)>;

typedef struct {
	int list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VK396;

typedef struct Spring<double, 1, mdc::SpringType::Linear> {
	double _position;
	double _velocity;
	double _restingPosition;
	double _kSpring;
	double _kDamper;
} Spring<double, 1, mdc::SpringType::Linear>;

typedef struct Spring<double, 1, mdc::SpringType::Angular> {
	double _position;
	double _velocity;
	double _restingPosition;
	double _kSpring;
	double _kDamper;
} Spring<double, 1, mdc::SpringType::Angular>;

typedef struct Spring<double, 2, mdc::SpringType::Linear> {
	Matrix<double, 2, 1> _position;
	Matrix<double, 2, 1> _velocity;
	Matrix<double, 2, 1> _restingPosition;
	double _kSpring;
	double _kDamper;
} Spring<double, 2, mdc::SpringType::Linear>;

typedef struct _compressed_pair<geo::Coordinate3D<Radians, double> *, std::__1::allocator<geo::Coordinate3D<Radians, double> > > {
	Coordinate3D<Radians, double> __value_;
} compressed_pair<geo::Coordinate3D<Radians, double> *, std::__1::allocator<geo::Coordinate3D<Radians, double> > >;

typedef struct vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > > {
	Coordinate3D<Radians, double> __begin_;
	Coordinate3D<Radians, double> __end_;
	compressed_pair<geo::Coordinate3D<Radians, double> *, std::__1::allocator<geo::Coordinate3D<Radians, double> > > __end_cap_;
} vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > >;

typedef struct weak_ptr<md::StylesheetVendor> {
	StylesheetVendor __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<md::StylesheetVendor>;

typedef struct _compressed_pair<md::GlobeAdapter *, std::__1::default_delete<md::GlobeAdapter> > {
	GlobeAdapter __value_;
} compressed_pair<md::GlobeAdapter *, std::__1::default_delete<md::GlobeAdapter> >;

typedef struct unique_ptr<md::GlobeAdapter, std::__1::default_delete<md::GlobeAdapter> > {
	compressed_pair<md::GlobeAdapter *, std::__1::default_delete<md::GlobeAdapter> > __ptr_;
} unique_ptr<md::GlobeAdapter, std::__1::default_delete<md::GlobeAdapter> >;

typedef struct {
	unsigned field1;
	float field2;
	unsigned field3;
	unsigned field4;
	int field5;
	SCD_Struct_VK188 field6;
} SCD_Struct_VK405;

typedef struct weak_ptr<md::GlobeOverlayContainer> {
	GlobeOverlayContainer __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<md::GlobeOverlayContainer>;

typedef struct weak_ptr<md::OverlayContainer> {
	OverlayContainer __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<md::OverlayContainer>;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_VK408;

typedef struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> {
	BufferMemory _memory;
} DataWrite<ggl::PolygonCommonStroke::DefaultVbo>;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > > {
	shared_ptr<ggl::PolygonCommonStroke::MeshMesh> __value_;
} compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >;

typedef struct vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > > {
	shared_ptr<ggl::PolygonCommonStroke::MeshMesh> __begin_;
	shared_ptr<ggl::PolygonCommonStroke::MeshMesh> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > >;

typedef struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh> > > _meshes;
	DataWrite<ggl::PolygonCommonStroke::DefaultVbo> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>;

typedef struct optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> > {
	BOOL _hasValue;
	ValueUnion _value;
	unsigned char data[152];
	MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>) type;
} optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> >;

typedef struct {
	SCD_Struct_VK178 field1;
	SCD_Struct_VK178 field2;
	BOOL field3;
	BOOL field4;
	unsigned char field5;
	unsigned long long field6;
	unsigned long long field7;
	SCD_Struct_VK181 field8;
	unsigned long long field9;
} SCD_Struct_VK414;

typedef struct {
	unsigned field1;
	int field2;
} SCD_Struct_VK415;

typedef struct weak_ptr<ggl::RunLoop::_RunLoopCallbacker> {
	_RunLoopCallbacker __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<ggl::RunLoop::_RunLoopCallbacker>;

typedef struct shared_ptr<ggl::MetalDevice> {
	MetalDevice __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::MetalDevice>;

