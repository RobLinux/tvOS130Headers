/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:46:40 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKCameraController.h>
#import <VectorKit/VKNavigationCameraController.h>
#import <VectorKit/VKGesturingCameraController.h>
#import <VectorKit/VKNavContextObserver.h>

@protocol VKNavGestureCameraBehavior, VKInteractiveMap;
@class VKSceneConfiguration, VKGestureCameraBehavior, VKAttachedNavGestureCameraBehavior, VKDetachedNavGestureCameraBehavior, VKTimedAnimation, VKNavContext, VKScreenCanvas, NSString, GEOMapRegion;

@interface VKNavCameraController : VKCameraController <VKNavigationCameraController, VKGesturingCameraController, VKNavContextObserver> {

	unsigned char _cameraType;
	unsigned char _headingType;
	Unit<RadianUnitDescription, double> _puckCourse;
	Coordinate3D<Radians, double> _puckCoordinate;
	Unit<RadianUnitDescription, double> _headingDelta;
	Unit<RadianUnitDescription, double> _headingMinDelta;
	CameraFrame<geo::Radians, double> _lastCalculatedCameraFrame;
	CameraFrame<geo::Radians, double> _cameraFrame;
	BOOL _needsUpdate;
	Spring<double, 1, mdc::SpringType::Linear> _pitchSpring;
	Spring<double, 1, mdc::SpringType::Angular> _headingSpring;
	Spring<double, 1, mdc::SpringType::Linear> _distanceFromTargetSpring;
	Spring<double, 2, mdc::SpringType::Linear> _screenPositionSpring;
	Unit<MeterUnitDescription, double> _cameraDistanceFromTarget;
	Unit<RadianUnitDescription, double> _cameraPitch;
	double _previousUpdateTime;
	double _maxZoomScale;
	double _minZoomScale;
	VKGestureCameraBehavior*<VKNavGestureCameraBehavior> _gestureBehavior;
	VKAttachedNavGestureCameraBehavior* _attachedGestureBehavior;
	VKDetachedNavGestureCameraBehavior* _detachedGestureBehavior;
	BOOL _isDetached;
	BOOL _panning;
	BOOL _rotating;
	BOOL _pitching;
	BOOL _zooming;
	VKTimedAnimation* _transitionAnimation;
	VKTimedAnimation* _snapPitchAnimation;
	VKTimedAnimation* _snapHeadingAnimation;
	CameraFrame<geo::Radians, double> _transitionFrame;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > _currentStyleName;
	vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > >* _coordinatesToFrame;
	unsigned char _styleManeuversToFrame;
	unsigned char _maneuversToFrame;
	double _minCameraHeight;
	double _maxCameraHeight;
	Unit<RadianUnitDescription, double> _minCameraPitch;
	Unit<RadianUnitDescription, double> _maxCameraPitch;
	VKEdgeInsets _previousMapEdgeInsets;
	VKEdgeInsets _framingEdgeInset;
	VKEdgeInsets _framingEdgeInsetProportional;
	VKEdgeInsets _clientFramingInsets;
	Matrix<float, 2, 1> _puckMovementBoundsMin;
	Matrix<float, 2, 1> _puckMovementBoundsMax;
	Matrix<float, 2, 1> _puckScreenPosition;
	double _minHeightDeltaChangeHorizontal;
	double _maxHeightDeltaChangeHorizontal;
	double _minHeightDeltaChangeVertical;
	double _maxHeightDeltaChangeVertical;
	double _halfPuckSize;
	Box<double, 2> _viewableScreenRect;
	Box<double, 2> _framingScreenRect;
	BOOL _enablePan;
	BOOL _enableZoom;
	BOOL _enablePitch;
	BOOL _enableRotate;
	float _panReturnDelayTime;
	unsigned char _alternateFramingSource;
	double _maxFramingDistance;
	double _framingDistanceAfterManeuver;
	VKNavContext* _navContext;
	CGSize _locationCoordinate;
	PolylineCoordinate _routeCoordinate;
	BOOL _frameAllGroupedManeuvers;
	unsigned char _maxManeuversToFrame;
	BOOL _ignorePointsBehind;
	BOOL _insetsAnimating;
	Coordinate3D<Radians, double> _routeFocusCoordinate;
	unsigned long long _lastTargetStyleIdentifier;
	double _desiredZoomScale;
	float _animationTime;
	BOOL _isTracking;
	shared_ptr<md::TaskContext>* _taskContext;
	double _depthNear;
	BOOL _leftHanded;
	BOOL _sentZoomNotification;
	VKScreenCanvas*<VKInteractiveMap> _screenCanvas;
	VKSceneConfiguration* _sceneConfiguration;
	long long _baseDisplayRate;

}

@property (assign,nonatomic) VKScreenCanvas*<VKInteractiveMap> screenCanvas;              //@synthesize screenCanvas=_screenCanvas - In the implementation block
@property (assign,nonatomic) VKSceneConfiguration * sceneConfiguration;                   //@synthesize sceneConfiguration=_sceneConfiguration - In the implementation block
@property (assign,nonatomic) double zoomScale; 
@property (assign,nonatomic) long long baseDisplayRate;                                   //@synthesize baseDisplayRate=_baseDisplayRate - In the implementation block
@property (assign,nonatomic) VKEdgeInsets clientFramingInsets;                            //@synthesize clientFramingInsets=_clientFramingInsets - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic) CGSize centerCoordinate; 
@property (assign,nonatomic) double distanceFromCenterCoordinate; 
@property (assign,nonatomic) double heading; 
@property (assign,nonatomic) double pitch; 
@property (nonatomic,readonly) GEOMapRegion * mapRegion; 
@property (nonatomic,readonly) double altitude; 
@property (nonatomic,readonly) double maxPitch; 
@property (nonatomic,readonly) BOOL isPitched; 
@property (nonatomic,readonly) BOOL isRotated; 
@property (nonatomic,readonly) BOOL isFullyPitched; 
@property (nonatomic,readonly) MapDataAccess* mapDataAccess; 
@property (nonatomic,readonly) AnimationRunner* animationRunner; 
@property (nonatomic,readonly) RunLoopController* runLoopController; 
-(id)init;
-(void)dealloc;
-(void)stop;
-(double)pitch;
-(double)heading;
-(double)altitude;
-(void)setCamera:(id)arg1 ;
-(CameraFrame<geo::Radians, double>)cameraFrame;
-(void)setCameraFrame:(CameraFrame<geo::Radians, double>)arg1 ;
-(CGSize)centerCoordinate;
-(id)detailedDescription;
-(void)setEdgeInsets:(VKEdgeInsets)arg1 ;
-(BOOL)_canZoomOut;
-(BOOL)_canZoomIn;
-(void)setZoomScale:(double)arg1 ;
-(double)zoomScale;
-(double)currentZoomLevel;
-(long long)baseDisplayRate;
-(void)setBaseDisplayRate:(long long)arg1 ;
-(BOOL)isPitchEnabled;
-(BOOL)isGesturing;
-(BOOL)canZoomInForTileSize:(long long)arg1 ;
-(BOOL)canZoomOutForTileSize:(long long)arg1 ;
-(BOOL)canEnter3DMode;
-(void)edgeInsetsDidEndAnimating;
-(void)edgeInsetsWillBeginAnimating;
-(void)setClientFramingInsets:(VKEdgeInsets)arg1 ;
-(void)returnToPuck;
-(id)initWithTaskContext:(shared_ptr<md::TaskContext>*)arg1 device:(Device*)arg2 mapDataAccess:(MapDataAccess*)arg3 animationRunner:(AnimationRunner*)arg4 runLoopController:(RunLoopController*)arg5 cameraDelegate:(id)arg6 ;
-(VKSceneConfiguration *)sceneConfiguration;
-(void)setSceneConfiguration:(VKSceneConfiguration *)arg1 ;
-(void)setNavContext:(id)arg1 ;
-(void)updateLocation:(const Coordinate3D<Radians, double>*)arg1 andCourse:(const Unit<RadianUnitDescription, double>*)arg2 ;
-(void)updateWithTimestamp:(double)arg1 ;
-(BOOL)wantsTimerTick;
-(void)zoom:(double)arg1 withFocusPoint:(CGPoint)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)startPinchingWithFocusPoint:(CGPoint)arg1 ;
-(void)updatePinchWithFocusPoint:(CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3 ;
-(void)stopPinchingWithFocusPoint:(CGPoint)arg1 ;
-(void)startPanningAtPoint:(CGPoint)arg1 panAtStartPoint:(BOOL)arg2 ;
-(void)updatePanWithTranslation:(CGPoint)arg1 ;
-(void)stopPanningAtPoint:(CGPoint)arg1 ;
-(void)startRotatingWithFocusPoint:(CGPoint)arg1 ;
-(void)updateRotationWithFocusPoint:(CGPoint)arg1 newValue:(double)arg2 ;
-(void)stopRotatingWithFocusPoint:(CGPoint)arg1 ;
-(void)startPitchingWithFocusPoint:(CGPoint)arg1 ;
-(void)updatePitchWithFocusPoint:(CGPoint)arg1 translation:(double)arg2 ;
-(void)stopPitchingWithFocusPoint:(CGPoint)arg1 ;
-(BOOL)tapAtPoint:(CGPoint)arg1 ;
-(void)transferGestureState:(id)arg1 ;
-(void)stopSnappingAnimations;
-(void)puckAnimator:(id)arg1 updatedPosition:(const Coordinate3D<Radians, double>*)arg2 course:(const Unit<RadianUnitDescription, double>*)arg3 ;
-(void)puckAnimatorDidStop:(id)arg1 ;
-(void)puckAnimator:(id)arg1 updatedTargetPosition:(const Coordinate3D<Radians, double>*)arg2 ;
-(void)puckAnimator:(id)arg1 runAnimation:(id)arg2 ;
-(void)stylesheetDidReload;
-(void)setScreenCanvas:(VKScreenCanvas*<VKInteractiveMap>)arg1 ;
-(void)startWithPounce:(BOOL)arg1 startLocation:(CGSize)arg2 startCourse:(double)arg3 pounceCompletionHandler:(/*^block*/id)arg4 ;
-(void)canvasDidLayout;
-(double)minimumZoomLevel;
-(double)maximumZoomLevel;
-(double)topDownMinimumZoomLevel;
-(double)distanceFromCenterCoordinate;
-(void)stylesheetDidChange;
-(BOOL)isRotateEnabled;
-(void)navContextStateDidChange:(id)arg1 ;
-(void)navContextCameraHeadingOverrideDidChange:(id)arg1 ;
-(void)stopAnimations;
-(void)_updateZoomScaleLimts;
-(void)_updateSceneStyles:(BOOL)arg1 ;
-(Box<double, 2>)calculateViewableScreenRect;
-(Matrix<double, 2, 1>)puckScreenPoint;
-(void)animateCameraWithDuration:(float)arg1 fromFrame:(const CameraFrame<geo::Radians, double>*)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)updateCameraState;
-(void)resetSpringsToResting;
-(CameraFrame<geo::Radians, double>)currentCameraFrame;
-(void)_setNeedsUpdate;
-(void)returnToTrackingWithDelay:(double)arg1 resetZoom:(BOOL)arg2 ;
-(void)_snapPitch;
-(void)_snapHeading;
-(void)_setDetached:(BOOL)arg1 ;
-(void)_updateObserverCouldZoomIn:(BOOL)arg1 couldZoomOut:(BOOL)arg2 ;
-(void)updateSpringsForTrackingCamera;
-(void)updateSpringsForFramingCamera;
-(void)_updateStyles;
-(BOOL)_updateSprings:(double)arg1 ;
-(BOOL)_hasRunningAnimation;
-(void)_updateDebugOverlay;
-(void)_updateDebugText;
-(id)_debugText:(BOOL)arg1 showNavCameraDebugConsoleAttributes:(BOOL)arg2 ;
-(unsigned char)cameraHeadingType;
-(CameraFrame<geo::Radians, double>)restingCameraFrame;
-(double)_normalizedZoomLevelForDisplayZoomLevel:(double)arg1 ;
-(Box<double, 2>)calculateViewableScreenRectForEdgeInsets:(VKEdgeInsets)arg1 ;
-(Unit<RadianUnitDescription, double>)calculateHeading;
-(void)_updateForAnimatedEdgeInsets;
-(double)distanceToManeuver:(unsigned long long)arg1 ;
-(Coordinate3D<Radians, double>)routeCoordinateAtDistance:(double)arg1 ;
-(Coordinate3D<Radians, double>)routeLocationAtDistance:(double)arg1 fromManeuver:(unsigned long long)arg2 ;
-(void)_addAdditionalRoutePointsToFrameToList:(vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double> > >*)arg1 ;
-(void)updateManeuversToFrame;
-(void)updatePointsToFrame;
-(double)minZoomHeight;
-(double)maxZoomHeight;
-(VKScreenCanvas*<VKInteractiveMap>)screenCanvas;
-(double)minZoomScale;
-(double)maxZoomScale;
-(Unit<RadianUnitDescription, double>)minCameraPitch;
-(Unit<RadianUnitDescription, double>)maxCameraPitch;
-(VKEdgeInsets)clientFramingInsets;
@end

