/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:46:40 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/VKPolygonGroup.h>

@interface VKVenueGroup : VKPolygonGroup {

	optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> >* _venueWallMeshInfo;
	optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> >* _venueWallEndCapMeshInfo;
	optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> >* _venueWallHorizontalStrokeMeshInfo;
	optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> >* _venueWallVerticalStrokeMeshInfo;
	vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh> > >* _venueWallMeshes;
	vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh> > >* _venueWallEndMeshes;
	vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> > >* _venueWallHorizontalStrokeMeshes;
	vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> > >* _venueWallVerticalStrokeMeshes;
	unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > >* _venueWalls;
	unsigned long long _buildingId;
	float _maximumSectionLength;
	shared_ptr<ggl::Texture2D>* _wallTexture;
	int _layer;

}

@property (nonatomic,readonly) int layer;                                                                                                                        //@synthesize layer=_layer - In the implementation block
@property (nonatomic,readonly) unsigned long long buildingId; 
@property (nonatomic,readonly) float maximumSectionLength; 
@property (nonatomic,readonly) Texture2D* wallTexture; 
@property (nonatomic,readonly) const vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>* venueWallMeshes; 
@property (nonatomic,readonly) const vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>* venueWallEndMeshes; 
@property (nonatomic,readonly) const vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>* venueWallHorizontalStrokeMeshes; 
@property (nonatomic,readonly) const vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>* venueWallVerticalStrokeMeshes; 
-(int)layer;
-(unsigned long long)buildingId;
-(Texture2D*)wallTexture;
-(float)maximumSectionLength;
-(const vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>*)venueWallMeshes;
-(const vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>*)venueWallEndMeshes;
-(const vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>*)venueWallHorizontalStrokeMeshes;
-(const vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>*)venueWallVerticalStrokeMeshes;
-(void)willAddDataWithAccessor:(ResourceAccessor*)arg1 ;
-(void)didFinishAddingData;
-(unsigned long long)verticalStrokeCountForSection:(const PolygonSection*)arg1 styles:(const vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg2 edges:(const vector<Edge, std::__1::allocator<Edge> >*)arg3 ;
-(StrokeBufferSizing)bufferSizingForStrokesOnSection:(const PolygonSection*)arg1 styles:(const vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg2 edges:(const vector<Edge, std::__1::allocator<Edge> >*)arg3 ;
-(void)prepareToStrokeSection:(const PolygonSection*)arg1 key:(const pair<void *, unsigned long>*)arg2 styles:(vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg3 paddedCount:(unsigned)arg4 ;
-(const vector<Edge, std::__1::allocator<Edge> >*)generateEdgeListForPolygonSection:(const PolygonSection*)arg1 key:(const pair<void *, unsigned long>*)arg2 ;
-(void)prepareToGenerateWallsForSection:(const PolygonSection*)arg1 styles:(vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg2 edges:(const vector<Edge, std::__1::allocator<Edge> >*)arg3 ;
-(void)prepareToGenerateWallStrokesForSection:(const PolygonSection*)arg1 styles:(const vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg2 edges:(const vector<Edge, std::__1::allocator<Edge> >*)arg3 ;
-(void)addStrokeForSection:(const PolygonSection*)arg1 paddedCount:(unsigned)arg2 key:(pair<void *, unsigned long>*)arg3 attributes:(id)arg4 styles:(vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg5 cullingMask:(unsigned)arg6 accessor:(ResourceAccessor*)arg7 ;
-(void)addWallsForSection:(const PolygonSection*)arg1 edges:(const vector<Edge, std::__1::allocator<Edge> >*)arg2 attributes:(id)arg3 styles:(vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg4 cullingMask:(unsigned)arg5 accessor:(ResourceAccessor*)arg6 ;
-(void)addWallStrokesForSection:(const PolygonSection*)arg1 edges:(const vector<Edge, std::__1::allocator<Edge> >*)arg2 attributes:(id)arg3 styles:(vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair> > >*)arg4 cullingMask:(unsigned)arg5 accessor:(ResourceAccessor*)arg6 ;
-(void)updateTextures:(unsigned char)arg1 textureManager:(shared_ptr<md::TextureManager>Ref)arg2 ;
-(id)initWithStyleQuery:(shared_ptr<gss::StylesheetQuery<gss::PropertyID> >*)arg1 tileZoom:(float)arg2 layer:(int)arg3 buildingId:(unsigned long long)arg4 contentScale:(float)arg5 ;
@end

