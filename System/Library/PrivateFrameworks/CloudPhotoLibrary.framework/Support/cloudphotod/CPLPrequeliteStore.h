/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 2:39:42 AM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/Support/cloudphotod
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CloudPhotoLibrary/CPLPlatformObject.h>
#import <cloudphotod/CPLEngineStoreImplementation.h>

@protocol OS_dispatch_queue;
@class CPLChangeSessionUpdate, NSDate, NSObject, PQLConnection, NSURL, NSMutableSet, CPLPrequeliteVariable, NSString, NSMutableDictionary;

@interface CPLPrequeliteStore : CPLPlatformObject <CPLEngineStoreImplementation> {

	NSObject*<OS_dispatch_queue> _queue;
	PQLConnection* _db;
	NSURL* _dbURL;
	BOOL _configuringDB;
	NSMutableSet* _modifiedVariables;
	id _globalVariableCacheIdentifier;
	CPLPrequeliteVariable* _libraryVersionVar;
	CPLPrequeliteVariable* _userIdentifierVar;
	CPLPrequeliteVariable* _lastQuarantineCountReportDateVar;
	CPLPrequeliteVariable* _clientCacheIdentifierVar;
	CPLPrequeliteVariable* _clientCacheIdentifierAsKnownByClient;
	CPLPrequeliteVariable* _libraryCreationDateVar;
	CPLPrequeliteVariable* _changeSessionUpdateVar;
	CPLPrequeliteVariable* _libraryOptionsVar;
	CPLPrequeliteVariable* _shouldUpdateDisabledFeaturesVar;
	CPLPrequeliteVariable* _disabledFeaturesDataVar;
	BOOL _versionHasChanged;
	CPLPrequeliteVariable* _derivativesFilterVar;
	CPLPrequeliteVariable* _deactivatedVar;
	Class _userIdentifierClass;
	NSObject*<OS_dispatch_queue> _isClientInSyncWithClientCacheQueue;
	BOOL _isClientInSyncWithClientCache;
	unsigned long long _resetOption;
	NSString* _resetReason;
	NSString* _wipeReason;
	BOOL _needsToReset;
	BOOL _reentrencyGuard;
	BOOL _didWipeLibrary;
	int _upgradeEventJournal;
	BOOL _mustFix22666940;
	BOOL _mustMigratePushQueue;
	BOOL _checkConsistencyIfVersionHasChanged;
	BOOL _shouldProfile;
	BOOL _showStatsForAllTransactions;
	double _lastLongTransactionDate;
	NSMutableDictionary* _transactionStatistics;
	NSDate* _libraryCreationDate;

}

@property (readonly) NSDate * libraryCreationDate;                                              //@synthesize libraryCreationDate=_libraryCreationDate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) BOOL hasStoredChangeSessionUpdate; 
@property (nonatomic,readonly) CPLChangeSessionUpdate * storedChangeSessionUpdate; 
@property (nonatomic,readonly) BOOL shouldUpdateDisabledFeatures; 
@property (nonatomic,readonly) id corruptionInfo; 
-(id)userIdentifier;
-(id)status;
-(void)performBarrier;
-(BOOL)openWithError:(id*)arg1 ;
-(id)libraryVersion;
-(BOOL)closeWithError:(id*)arg1 ;
-(NSDate *)libraryCreationDate;
-(id)initWithAbstractObject:(id)arg1 ;
-(unsigned long long)libraryOptions;
-(void)writeTransactionDidFail;
-(void)writeTransactionDidSucceed;
-(BOOL)storeLibraryVersion:(id)arg1 withError:(id*)arg2 ;
-(BOOL)updateLibraryOptions:(unsigned long long)arg1 error:(id*)arg2 ;
-(id)createNewLibraryVersion;
-(BOOL)storeUserIdentifier:(id)arg1 error:(id*)arg2 ;
-(id)lastQuarantineCountReportDate;
-(BOOL)storeLastQuarantineCountReportDate:(id)arg1 error:(id*)arg2 ;
-(id)clientCacheIdentifier;
-(BOOL)storeClientIsInSyncWithClientCacheWithError:(id*)arg1 ;
-(BOOL)isClientInSyncWithClientCache;
-(id)corruptionInfo;
-(BOOL)storeChangeSessionUpdate:(id)arg1 error:(id*)arg2 ;
-(id)disabledFeatures;
-(BOOL)shouldUpdateDisabledFeatures;
-(BOOL)setShouldUpdateDisabledFeaturesWithError:(id*)arg1 ;
-(id)derivativesFilter;
-(BOOL)storeDerivativesFilter:(id)arg1 error:(id*)arg2 ;
-(void)wipeStoreAtNextOpeningWithReason:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(CPLChangeSessionUpdate *)storedChangeSessionUpdate;
-(BOOL)storeDisabledFeatures:(id)arg1 error:(id*)arg2 ;
-(BOOL)hasStoredChangeSessionUpdate;
-(void)performBarrierTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 ;
-(BOOL)markDatabaseAsDeactivatedWithError:(id*)arg1 ;
-(void)performWriteTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)performReadTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 ;
-(BOOL)executePostOpenWithError:(id*)arg1 ;
-(BOOL)storeClientCacheIdentifier:(id)arg1 error:(id*)arg2 ;
-(id)createNewClientCacheIdentifier;
-(BOOL)storeClientIsNotInSyncWithClientCacheWithError:(id*)arg1 ;
-(id)pqlConnection;
-(id)valueForGlobalVariable:(id)arg1 ;
-(BOOL)table:(id)arg1 hasRecordsMatchingQuery:(id)arg2 ;
-(BOOL)addGlobalVariable:(id)arg1 defaultValue:(id)arg2 error:(id*)arg3 ;
-(BOOL)setValue:(id)arg1 forGlobalVariable:(id)arg2 error:(id*)arg3 ;
-(BOOL)resetValueForGlobalVariable:(id)arg1 error:(id*)arg2 ;
-(unsigned long long)tableCountOfRecords:(id)arg1 ;
-(void)table:(id)arg1 enumerateCountGroupedByProperty:(id)arg2 block:(/*^block*/id)arg3 ;
-(void)recordUpgradeEvent:(id)arg1 ;
-(BOOL)table:(id)arg1 hasColumnWithName:(id)arg2 ;
-(BOOL)tableHasRecords:(id)arg1 ;
-(BOOL)_performWithFlags:(unsigned)arg1 action:(/*^block*/id)arg2 ;
-(id)_transactionStatsDescription;
-(void)_unsetupProfilingHooks;
-(void)_setupProfilingHooks;
-(void)triggerResetAfterUpgrade:(unsigned long long)arg1 withReason:(id)arg2 ;
-(BOOL)_fix22666940;
-(void)_wipeWithReason:(id)arg1 ;
-(BOOL)_openWithError:(id*)arg1 ;
-(void)_deleteCorruptionInfo;
-(id)wipeReason;
-(void)_deleteWipeReason;
-(BOOL)_closeWipeAndReOpenWithReason:(id)arg1 error:(id*)arg2 ;
-(BOOL)_upgradeToVersion:(long long)arg1 ;
-(BOOL)_postUpgradeToVersion:(long long)arg1 ;
-(BOOL)_initializeDB;
-(BOOL)_wipeIfDeactivated:(long long)arg1 didWipeDatabase:(BOOL*)arg2 error:(id*)arg3 ;
-(BOOL)_upgradeDB:(long long)arg1 ;
-(id)_corruptionMarkerURL;
-(void)_wipeBeforeOpeningIfNecessary;
-(BOOL)_setupPragmasAndFunctions;
-(BOOL)_setupDBIfNeeded;
-(void)_resetSyncAnchorsIfNecessary;
-(void)_cacheValue:(id)arg1 forVariable:(id)arg2 ;
-(Class)_userIdentifierClass;
-(id)_wipeStoreMarkerURL;
-(void)recordUpgradeEvent:(id)arg1 arguments:(char*)arg2 ;
-(unsigned long long)table:(id)arg1 countOfRecordsMatchingQuery:(id)arg2 ;
-(void)table:(id)arg1 enumerateCountGroupedByUnsignedIntegerProperty:(id)arg2 block:(/*^block*/id)arg3 ;
@end

