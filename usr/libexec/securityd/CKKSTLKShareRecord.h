/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 3:11:52 PM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /usr/libexec/securityd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <securityd/securityd-Structs.h>
#import <securityd/CKKSCKRecordHolder.h>

@class CKKSTLKShare, NSString, NSData;

@interface CKKSTLKShareRecord : CKKSCKRecordHolder {

	CKKSTLKShare* _share;

}

@property (retain) CKKSTLKShare * share;                   //@synthesize share=_share - In the implementation block
@property (readonly) NSString * tlkUUID; 
@property (readonly) NSString * senderPeerID; 
@property (readonly) long long epoch; 
@property (readonly) long long poisoned; 
@property (readonly) NSData * wrappedTLK; 
@property (readonly) NSData * signature; 
+(id)sqlTable;
+(id)fromDatabaseRow:(id)arg1 ;
+(id)sqlColumns;
+(id)allInZone:(id)arg1 error:(id*)arg2 ;
+(id)allForUUID:(id)arg1 zoneID:(id)arg2 error:(id*)arg3 ;
+(id)tryFromDatabaseFromCKRecordID:(id)arg1 error:(id*)arg2 ;
+(id)allFor:(id)arg1 keyUUID:(id)arg2 zoneID:(id)arg3 error:(id*)arg4 ;
+(id)fromDatabase:(id)arg1 receiverPeerID:(id)arg2 senderPeerID:(id)arg3 zoneID:(id)arg4 error:(id*)arg5 ;
+(id)tryFromDatabase:(id)arg1 receiverPeerID:(id)arg2 senderPeerID:(id)arg3 zoneID:(id)arg4 error:(id*)arg5 ;
+(id)ckrecordPrefix;
+(id)share:(id)arg1 as:(id)arg2 to:(id)arg3 epoch:(long long)arg4 poisoned:(long long)arg5 error:(id*)arg6 ;
-(id)sqlValues;
-(id)whereClauseToFindSelf;
-(id)CKRecordName;
-(id)updateCKRecord:(id)arg1 zoneID:(id)arg2 ;
-(void)setFromCKRecord:(id)arg1 ;
-(BOOL)matchesCKRecord:(id)arg1 ;
-(id)recoverTLK:(id)arg1 trustedPeers:(id)arg2 error:(id*)arg3 ;
-(BOOL)signatureVerifiesWithPeerSet:(id)arg1 error:(id*)arg2 ;
-(id)init:(id)arg1 zoneID:(id)arg2 encodedCKRecord:(id)arg3 ;
-(id)init:(id)arg1 sender:(id)arg2 receiver:(id)arg3 curve:(long long)arg4 version:(unsigned long long)arg5 epoch:(long long)arg6 poisoned:(long long)arg7 zoneID:(id)arg8 encodedCKRecord:(id)arg9 ;
-(id)initForKey:(id)arg1 senderPeerID:(id)arg2 recieverPeerID:(id)arg3 receiverEncPublicKeySPKI:(id)arg4 curve:(long long)arg5 version:(unsigned long long)arg6 epoch:(long long)arg7 poisoned:(long long)arg8 wrappedKey:(id)arg9 signature:(id)arg10 zoneID:(id)arg11 encodedCKRecord:(id)arg12 ;
-(id)dataForSigning;
-(id)signRecord:(id)arg1 error:(id*)arg2 ;
-(BOOL)verifySignature:(id)arg1 verifyingPeer:(id)arg2 error:(id*)arg3 ;
-(BOOL)isEqual:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)description;
-(long long)epoch;
-(NSData *)signature;
-(CKKSTLKShare *)share;
-(void)setShare:(CKKSTLKShare *)arg1 ;
-(NSString *)tlkUUID;
-(long long)poisoned;
-(NSString *)senderPeerID;
-(NSData *)wrappedTLK;
-(id)unwrapUsing:(id)arg1 error:(id*)arg2 ;
@end

