/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 3:11:39 PM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /usr/libexec/gamed
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <gamed/NSSecureCoding.h>

@class CKRecord, NSDictionary, GKCloudPlayer, NSURL, NSString, NSArray, NSData, NSDate, NSMutableDictionary;

@interface GKCloudGameSession : NSObject <NSSecureCoding> {

	CKRecord* _record;
	NSDictionary* _playersByIdentifier;
	GKCloudPlayer* _owner;
	NSURL* _url;

}

@property (nonatomic,retain) NSString * title; 
@property (nonatomic,retain) NSURL * url;                                              //@synthesize url=_url - In the implementation block
@property (nonatomic,retain) CKRecord * record;                                        //@synthesize record=_record - In the implementation block
@property (nonatomic,readonly) NSString * identifier; 
@property (assign,nonatomic) long long maxConnectedPlayers; 
@property (nonatomic,retain) NSDictionary * playersByIdentifier;                       //@synthesize playersByIdentifier=_playersByIdentifier - In the implementation block
@property (nonatomic,retain) GKCloudPlayer * owner;                                    //@synthesize owner=_owner - In the implementation block
@property (nonatomic,readonly) NSArray * connectedPlayerIDs; 
@property (nonatomic,retain) NSData * data; 
@property (nonatomic,readonly) NSDate * lastModifiedDate; 
@property (nonatomic,readonly) GKCloudPlayer * lastModifiedPlayer; 
@property (nonatomic,readonly) NSString * serverChangeTag; 
@property (nonatomic,retain) NSMutableDictionary * nicknamesByIdentifier; 
@property (nonatomic,readonly) NSString * containerName; 
@property (nonatomic,readonly) NSDictionary * playersByEmail; 
@property (nonatomic,retain) NSMutableDictionary * emailsByCKID; 
+(BOOL)supportsSecureCoding;
+(id)sharedDatabase;
+(void)acceptShareMetadata:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
+(id)cacheQueue;
+(void)removeSessionWithIdentifier:(id)arg1 handler:(/*^block*/id)arg2 ;
+(void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
+(id)privateDatabase;
+(id)allowedCharacterSet;
+(void)updateCacheForDatabase:(id)arg1 zoneIDs:(id)arg2 handler:(/*^block*/id)arg3 ;
+(id)databaseForZoneID:(id)arg1 ;
+(void)primaryPlayerWithHandler:(/*^block*/id)arg1 ;
+(id)friendEmailsByID;
+(void)fetchShareRecordsWithRecordIDs:(id)arg1 inDatabase:(id)arg2 handler:(/*^block*/id)arg3 ;
+(void)updateUserWithHandler:(/*^block*/id)arg1 ;
+(void)updateCacheForDatabaseScope:(long long)arg1 handler:(/*^block*/id)arg2 ;
+(void)bundleIDsForContainerName:(id)arg1 handler:(/*^block*/id)arg2 ;
+(void)acceptShareURL:(id)arg1 handler:(/*^block*/id)arg2 ;
+(void)updateBadgeCountsForContainerName:(id)arg1 ;
+(void)sessionForIdentifier:(id)arg1 handler:(/*^block*/id)arg2 ;
+(id)obfuscatedIdentifierForPlayerIdentifier:(id)arg1 containerName:(id)arg2 ;
+(id)playerIdentifierForUserRecordName:(id)arg1 ;
+(BOOL)isOwnRecordID:(id)arg1 ;
+(id)sessionIdentifierForRecordID:(id)arg1 ;
+(id)sessionCache;
+(id)mutablePlistFromPlayerStatesData:(id)arg1 error:(id*)arg2 ;
+(id)AES128EncryptedVersionOfData:(id)arg1 withKey:(id)arg2 ;
+(id)AES128DecryptedVersionOfData:(id)arg1 withKey:(id)arg2 ;
+(id)AES128Operation:(unsigned)arg1 key:(id)arg2 data:(id)arg3 ;
+(void)updateSessionCacheWithHandler:(/*^block*/id)arg1 ;
+(void)updateSessionCacheDatabasesWithHandler:(/*^block*/id)arg1 ;
+(void)updateFriendRecordIfNeeded;
+(void)subscribeToAllDBwithHandler:(/*^block*/id)arg1 ;
+(id)cloudKitOperationConfigurationForSocialGamingSessionsContainer;
+(void)updateCacheForFriendZoneID:(id)arg1 handler:(/*^block*/id)arg2 ;
+(void)reportChangesForSessions:(id)arg1 shareChangedSessions:(id)arg2 removedSessions:(id)arg3 zoneID:(id)arg4 handler:(/*^block*/id)arg5 ;
+(void)generateAndStoreInviteBulletinForRecord:(id)arg1 database:(id)arg2 ;
+(id)allChangedSessionsFromRecordChangedSessions:(id)arg1 shareChangedSessions:(id)arg2 ;
+(void)updateBadgeCountsForContainerName:(id)arg1 useCacheDirectly:(BOOL)arg2 ;
+(void)updatePlayersForSessions:(id)arg1 sharesByRecordID:(id)arg2 inDatabase:(id)arg3 handler:(/*^block*/id)arg4 ;
+(void)reportPlayerStateChangesToClients:(id)arg1 forUpdatedSession:(id)arg2 oldSession:(id)arg3 ;
+(void)determinePlayerChangesIn:(id)arg1 newSession:(id)arg2 notifyClients:(id)arg3 ;
+(void)updateFriendsWithRecord:(id)arg1 ;
+(void)createZoneWithName:(id)arg1 handler:(/*^block*/id)arg2 ;
+(BOOL)isOwnZoneID:(id)arg1 ;
+(id)cloudKitOperationConfigurationForContainer:(id)arg1 ;
+(id)databaseForSession:(id)arg1 ;
+(void)sessionForShareMetadata:(id)arg1 handler:(/*^block*/id)arg2 ;
+(id)localPlayerAlias;
+(void)saveInformationForPrimaryUserForSessionWithShareMetadata:(id)arg1 handler:(/*^block*/id)arg2 ;
+(void)updateCacheForZoneID:(id)arg1 handler:(/*^block*/id)arg2 ;
+(void)fetchShareMetadataForURL:(id)arg1 handler:(/*^block*/id)arg2 ;
+(void)handleLegacyShareMetadata:(id)arg1 needsAccept:(BOOL)arg2 completionHandler:(/*^block*/id)arg3 ;
+(void)handleSessionShareMetadata:(id)arg1 needsAccept:(BOOL)arg2 completionHandler:(/*^block*/id)arg3 ;
+(void)showAcceptAlertWithHandler:(/*^block*/id)arg1 ;
+(void)launchOrOpenAppStoreForBundleID:(id)arg1 ;
+(void)openStoreForBundleID:(id)arg1 ;
+(id)packFakeTurnBasedBulletinWithZoneData:(id)arg1 ;
+(id)packFakeRealTimeBulletinWithZoneData:(id)arg1 ;
+(void)searchAndSaveIdentityForRecord:(id)arg1 database:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
+(void)saveInviteRecord:(id)arg1 database:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
+(void)badgeCountForContainerName:(id)arg1 useCacheDirectly:(BOOL)arg2 handler:(/*^block*/id)arg3 ;
+(void)sessionsForContainerName:(id)arg1 handler:(/*^block*/id)arg2 ;
+(id)playerIdentifierForObfuscatedIdentifier:(id)arg1 containerName:(id)arg2 ;
+(void)fetchUserRecordIDWithHandler:(/*^block*/id)arg1 ;
+(void)getFriendPlayersWithHandler:(/*^block*/id)arg1 ;
+(id)recordIDForSessionIdentifier:(id)arg1 ;
+(BOOL)isCloudDriveEnabledForBundleID:(id)arg1 ;
+(void)createSessionWithContainerName:(id)arg1 title:(id)arg2 maxConnectedPlayers:(long long)arg3 handler:(/*^block*/id)arg4 ;
+(void)getZoneNamesWithCompletionHandler:(/*^block*/id)arg1 ;
+(id)getAssociatedAccounts;
+(void)deleteInviteRecordWithRecordID:(id)arg1 fromDatabase:(id)arg2 ;
-(id)description;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(NSData *)data;
-(NSString *)identifier;
-(void)setOwner:(GKCloudPlayer *)arg1 ;
-(void)setData:(NSData *)arg1 ;
-(NSURL *)url;
-(NSString *)title;
-(void)setTitle:(NSString *)arg1 ;
-(NSString *)containerName;
-(NSDate *)lastModifiedDate;
-(void)setUrl:(NSURL *)arg1 ;
-(id)initWithRecord:(id)arg1 ;
-(CKRecord *)record;
-(void)setRecord:(CKRecord *)arg1 ;
-(GKCloudPlayer *)owner;
-(id)players;
-(void)setPlayers:(id)arg1 ;
-(NSDictionary *)playersByIdentifier;
-(void)setPlayersByIdentifier:(NSDictionary *)arg1 ;
-(NSArray *)connectedPlayerIDs;
-(void)setPlayerStates:(id)arg1 ;
-(GKCloudPlayer *)lastModifiedPlayer;
-(NSString *)serverChangeTag;
-(id)playerStates;
-(BOOL)isOwnedByUser;
-(NSMutableDictionary *)emailsByCKID;
-(void)getShareURLWithHandler:(/*^block*/id)arg1 ;
-(long long)maxConnectedPlayers;
-(NSDictionary *)playersByEmail;
-(id)createGKGameSession;
-(id)playersForGKGameSession;
-(void)updatePlayersWithIdentities:(id)arg1 ;
-(NSMutableDictionary *)nicknamesByIdentifier;
-(id)initWithContainerName:(id)arg1 ;
-(void)setMaxConnectedPlayers:(long long)arg1 ;
-(void)setNicknamesByIdentifier:(NSMutableDictionary *)arg1 ;
-(void)setEmailsByCKID:(NSMutableDictionary *)arg1 ;
-(void)deleteShareWithHandler:(/*^block*/id)arg1 ;
-(void)saveWithHandler:(/*^block*/id)arg1 ;
-(void)setupShareWithRecordID:(id)arg1 handler:(/*^block*/id)arg2 ;
-(void)fetchShareRecordWithRecordID:(id)arg1 handler:(/*^block*/id)arg2 ;
-(void)saveShare:(id)arg1 isNewShare:(BOOL)arg2 handler:(/*^block*/id)arg3 ;
-(void)tempEmailFixForPlayerID:(id)arg1 ;
-(void)saveData:(id)arg1 changeTag:(id)arg2 handler:(/*^block*/id)arg3 ;
-(void)removePlayers:(id)arg1 handler:(/*^block*/id)arg2 ;
-(void)saveConnectionState:(long long)arg1 forPlayerWithID:(id)arg2 handler:(/*^block*/id)arg3 ;
-(void)setBadged:(BOOL)arg1 forPlayerIDs:(id)arg2 handler:(/*^block*/id)arg3 ;
@end

