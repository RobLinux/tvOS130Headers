/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 3:11:48 PM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /usr/libexec/locationd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class CLBarometerCalibrationContextManager, NSObject<OS_os_transaction>, CLSilo;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned elevationDescended : 1;
	unsigned gradeType : 1;
	unsigned rawGradeType : 1;
	unsigned source : 1;
	unsigned verticalSpeed : 1;
} SCD_Struct_AL1;

typedef struct {
	unsigned timestamp : 1;
} SCD_Struct_AL2;

typedef struct {
	unsigned startTime : 1;
	unsigned exitState : 1;
	unsigned mounted : 1;
	unsigned mountedConfidence : 1;
	unsigned turn : 1;
	unsigned isMoving : 1;
	unsigned isVehicular : 1;
} SCD_Struct_AL3;

typedef struct {
	unsigned timestamp : 1;
	unsigned pacebin : 1;
	unsigned recordId : 1;
	unsigned regularEntry : 1;
} SCD_Struct_AL4;

typedef struct {
	unsigned pace : 1;
	unsigned timestamp : 1;
	unsigned recordId : 1;
} SCD_Struct_AL5;

typedef struct {
	unsigned estExitTime : 1;
	unsigned startTime : 1;
	unsigned confidence : 1;
	unsigned exitState : 1;
	unsigned mountedConfidence : 1;
	unsigned mountedState : 1;
	unsigned tilt : 1;
	unsigned isStanding : 1;
	unsigned isVehicleConnected : 1;
} SCD_Struct_AL6;

typedef struct shared_ptr<CLHarvestController> {
	CLHarvestController __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CLHarvestController>;

typedef struct shared_ptr<CLMonitorGps> {
	CLMonitorGps __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CLMonitorGps>;

typedef struct shared_ptr<CLPolicyTrip> {
	CLPolicyTrip __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CLPolicyTrip>;

typedef struct shared_ptr<CLPolicyProactive> {
	CLPolicyProactive __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CLPolicyProactive>;

typedef struct _compressed_pair<std::__1::shared_ptr<CLSubHarvester> *, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester> > > {
	shared_ptr<CLSubHarvester> __value_;
} compressed_pair<std::__1::shared_ptr<CLSubHarvester> *, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester> > >;

typedef struct vector<std::__1::shared_ptr<CLSubHarvester>, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester> > > {
	shared_ptr<CLSubHarvester> __begin_;
	shared_ptr<CLSubHarvester> __end_;
	compressed_pair<std::__1::shared_ptr<CLSubHarvester> *, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester> > > __end_cap_;
} vector<std::__1::shared_ptr<CLSubHarvester>, std::__1::allocator<std::__1::shared_ptr<CLSubHarvester> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > >;

typedef struct _compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> > {
	pair<double, unsigned int> __value_;
} compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> >;

typedef struct _split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> > {
	pair<double, unsigned int> __first_;
	pair<double, unsigned int> __begin_;
	pair<double, unsigned int> __end_;
	compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> > __end_cap_;
} split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> >;

typedef struct deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > {
	split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > > __size_;
} deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > >;

typedef struct queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > > {
	deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > c;
} queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > >;

typedef struct LikelihoodRatioInfo {
	float firstBinEdge;
	float binSize;
	unsigned char binNum;
} LikelihoodRatioInfo;

typedef struct FallModel {
	float fRatioMaxAbsX[17];
	float fRatioMaxAbsY[17];
	float fRatioMaxAbsZ[17];
	float fRatioMaxJerkVM[67];
	float fRatioMinInertialZ[21];
	float fRatioAccelPathLength[10];
	float fRatioMaxAngleChangePreimpact[16];
	float fRatioMaxAngleChangePostimpact[16];
	LikelihoodRatioInfo fLikelihoodRatioInfo[8];
} FallModel;

typedef struct FallThresholds {
	float fImpactMaxAccelNormAlertThreshold;
	float fImpactMaxAccelNormLoggingStatsThreshold;
	float fImpactMaxAccelNormLoggingHeartRateThreshold;
	float fImpactMaxAccelNormLoggingHighResolutionSensorDataThreshold;
	float fTripFallPosteriorRatioDetectionThreshold;
	float fSlipFallPosteriorRatioDetectionThreshold;
	float fOtherFallPosteriorRatioDetectionThreshold;
	float fTripNearFallPosteriorRatioDetectionThreshold;
	float fSlipNearFallPosteriorRatioDetectionThreshold;
	float fOtherNearFallPosteriorRatioDetectionThreshold;
} FallThresholds;

typedef struct FairPlayHWInfo_ {
	unsigned IDLength;
	unsigned char ID[20];
} FairPlayHWInfo_;

typedef struct FPSAPContextOpaque_* FPSAPContextOpaque_Ref;

typedef const struct __CFString* CFStringRef;

typedef struct vector<CLCell, std::__1::allocator<CLCell> >* vector<CLCell, std::__1::allocator<CLCell> >Ref;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_CL25;

typedef struct {
	BOOL field1;
	char field2[246];
} SCD_Struct_CL26;

typedef struct {
	SCD_Struct_CL25 field1;
	SCD_Struct_CL25 field2;
} SCD_Struct_CL27;

typedef struct {
	int field1;
	double( field2;
	/*function pointer*/void* field3;
	= field4;
	SCD_Struct_CL26 field5;
	SCD_Struct_CL27) field6;
} SCD_Struct_CL28;

typedef struct _compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> > {
	Client __value_;
} compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >;

typedef struct unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> > {
	compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> > __ptr_;
} unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >;

typedef struct _compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> > {
	Client __value_;
} compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >;

typedef struct unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> > {
	compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> > __ptr_;
} unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >;

typedef struct {
	double speed;
	double timestamp;
	double uncertainty;
} SCD_Struct_CL33;

typedef struct Battery {
	double level;
	BOOL charged;
	BOOL connected;
	int chargerType;
	BOOL wasConnected;
	int chargerFamily;
} Battery;

typedef struct CLDaemonStatusStateTrackerState {
	Battery batteryData;
	int reachability;
	int thermalLevel;
	BOOL airplaneMode;
	BOOL batterySaverModeEnabled;
	BOOL pushServiceConnected;
	BOOL restrictedMode;
} CLDaemonStatusStateTrackerState;

typedef struct CLMotionActivity {
	int type;
	int confidence;
	int mountedState;
	int mountedConfidence;
	BOOL isStanding;
	float tilt;
	double timestamp;
	BOOL isVehicleConnected;
	int exitState;
	double estExitTime;
	double startTime;
	int rawType;
	int rawConfidence;
	SCD_Struct_AL1 vehicularFlags;
	int vehicularConfidence;
	float drivingStowedLikelihoodSum;
	float drivingArmLikelihoodSum;
	float ssLikelihoodSum;
	int workoutDetectionType;
	double workoutDetectionTime;
	unsigned long long workoutEscalationTime;
} CLMotionActivity;

typedef struct _compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >;

typedef struct unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> > {
	compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> > __ptr_;
} unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >;

typedef struct _compressed_pair<CLFallNotifier_Type::Client *, std::__1::default_delete<CLFallNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLFallNotifier_Type::Client *, std::__1::default_delete<CLFallNotifier_Type::Client> >;

typedef struct unique_ptr<CLFallNotifier_Type::Client, std::__1::default_delete<CLFallNotifier_Type::Client> > {
	compressed_pair<CLFallNotifier_Type::Client *, std::__1::default_delete<CLFallNotifier_Type::Client> > __ptr_;
} unique_ptr<CLFallNotifier_Type::Client, std::__1::default_delete<CLFallNotifier_Type::Client> >;

typedef struct _compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >;

typedef struct unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> > {
	compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> > __ptr_;
} unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >;

typedef struct _compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >;

typedef struct unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> > {
	compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> > __ptr_;
} unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_CL45;

typedef struct {
	double latitude;
	double longitude;
} SCD_Struct_CL46;

typedef struct _compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >;

typedef struct unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> > {
	compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> > __ptr_;
} unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >;

typedef struct {
	unsigned startTime : 1;
	unsigned firstCatherine : 1;
	unsigned firstCatherineStartTime : 1;
	unsigned longestDropout : 1;
	unsigned maxGoodCatherine : 1;
	unsigned meanCatherine : 1;
	unsigned meanGoodCatherine : 1;
	unsigned minGoodCatherine : 1;
	unsigned nCatherine : 1;
	unsigned nDropout : 1;
	unsigned nGoodCatherine : 1;
	unsigned nHighCatherine : 1;
	unsigned nInterpolatedCatherine : 1;
	unsigned nLowCatherine : 1;
	unsigned nSampleAndHoldCatherine : 1;
	unsigned nVeryHighCatherine : 1;
	unsigned nVeryLowCatherine : 1;
	unsigned onsetCatherine : 1;
	unsigned onsetReason : 1;
	unsigned persistedMinHR : 1;
	unsigned totalDropoutTime : 1;
	unsigned userMaxCatherine : 1;
} SCD_Struct_AL49;

typedef struct CLClientManagerStateTrackerState {
	int locationServicesEnabledStatus;
	BOOL locationRestricted;
} CLClientManagerStateTrackerState;

typedef struct __CFUserNotification* CFUserNotificationRef;

typedef struct _compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> > {
	Client __value_;
} compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >;

typedef struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> > {
	compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> > __ptr_;
} unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > >;

typedef struct _tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> > __pair3_;
} tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > >;

typedef struct map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *> > > {
	tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > > __tree_;
} map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *> > >;

typedef struct _compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> > {
	Client __value_;
} compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >;

typedef struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> > {
	compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> > __ptr_;
} unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >;

typedef struct _compressed_pair<RollingPowerAssertion *, std::__1::default_delete<RollingPowerAssertion> > {
	RollingPowerAssertion __value_;
} compressed_pair<RollingPowerAssertion *, std::__1::default_delete<RollingPowerAssertion> >;

typedef struct unique_ptr<RollingPowerAssertion, std::__1::default_delete<RollingPowerAssertion> > {
	compressed_pair<RollingPowerAssertion *, std::__1::default_delete<RollingPowerAssertion> > __ptr_;
} unique_ptr<RollingPowerAssertion, std::__1::default_delete<RollingPowerAssertion> >;

typedef struct _compressed_pair<CLMotionActivity *, std::__1::default_delete<CLMotionActivity> > {
	CLMotionActivity __value_;
} compressed_pair<CLMotionActivity *, std::__1::default_delete<CLMotionActivity> >;

typedef struct unique_ptr<CLMotionActivity, std::__1::default_delete<CLMotionActivity> > {
	compressed_pair<CLMotionActivity *, std::__1::default_delete<CLMotionActivity> > __ptr_;
} unique_ptr<CLMotionActivity, std::__1::default_delete<CLMotionActivity> >;

typedef struct duration<long double, std::__1::ratio<1, 1> > {
	D __rep_;
} duration<long double, std::__1::ratio<1, 1> >;

typedef struct time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > > {
	duration<long double, std::__1::ratio<1, 1> > __d_;
} time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >;

typedef struct {
	int field1;
	double field2;
	unsigned field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	int field9;
	int field10;
	double field11;
	double field12;
	int field13;
	double field14;
} SCD_Struct_CM67;

typedef struct _compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > {
	Client __value_;
} compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >;

typedef struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > {
	compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > __ptr_;
} unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >;

typedef struct _compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> > {
	Client __value_;
} compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >;

typedef struct unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> > {
	compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> > __ptr_;
} unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >;

typedef struct _compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >;

typedef struct unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> > {
	compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> > __ptr_;
} unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >;

typedef struct _compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> > {
	Client __value_;
} compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >;

typedef struct unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> > {
	compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> > __ptr_;
} unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >;

typedef struct shared_ptr<CLStepCountRecorderDb> {
	CLStepCountRecorderDb __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<CLStepCountRecorderDb>;

typedef struct CLStrideCalibrationSessionMetrics {
	int session;
	double startTime;
	double endTime;
	double sumCalibrationDistanceSuccess;
	double sumCalibrationDistanceFailOther;
	double sumCalibrationDistanceFailGps;
	double sumCalibrationDistanceFailPedometer;
	double sumCalibrationDistanceFailGradient;
	double sumCalibrationDistanceInvalidGain;
	double sumCalibrationDistanceInvalidSpeed;
	double sumCalibrationDistanceInvalidLength;
	double totalDistance;
} CLStrideCalibrationSessionMetrics;

typedef struct {
	unsigned short fHead;
	unsigned short fSize;
} SCD_Struct_CM78;

typedef struct CMQueueStorage<double, 2> {
	char buffer[8];
} CMQueueStorage<double, 2>;

typedef struct CMFixedSizeQueue<double, 2> {
	SCD_Struct_CM78 fHeadAndSize;
	unsigned fCapacity;
	char fBuffer[8];
	CMQueueStorage<double, 2> fStorage;
} CMFixedSizeQueue<double, 2>;

typedef struct _long {
	char* __data_;
	unsigned long long __size_;
	unsigned long long __cap_;
} long;

typedef struct {
	unsigned char __size_;
} SCD_Struct_CL82;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _short {
	char __data_[23];
	SCD_Struct_CL82 ;
} short;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __value_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct Name {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > fExecutable;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > fBundlePath;
	BOOL fBundleRequiresProxy;
	BOOL fSystemService;
	BOOL fHarvestableSystemService;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > fBundleId;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > fPluginBundleId;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > fCounterpartBundleId;
	BOOL fValidProxyData;
	BOOL fWatchKitPlugin;
} Name;

typedef struct {
	unsigned strokeAmp : 1;
	unsigned strokeFrequency : 1;
} SCD_Struct_AL89;

typedef struct _compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > > {
	pair<double, CLMotionActivity::Type> __value_;
} compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >;

typedef struct vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > > {
	pair<double, CLMotionActivity::Type> __begin_;
	pair<double, CLMotionActivity::Type> __end_;
	compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > > __end_cap_;
} vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > >;

typedef struct _compressed_pair<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> **, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *> > {
	shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> __value_;
} compressed_pair<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> **, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *> >;

typedef struct _split_buffer<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *> > {
	shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> __first_;
	shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> __begin_;
	shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> __end_;
	compressed_pair<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> **, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *> > __end_cap_;
} split_buffer<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *> >;

typedef struct deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > > {
	split_buffer<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > > __size_;
} deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > >;

typedef struct array<std::__1::deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > >, 4> {
	deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > > __elems_[4];
} array<std::__1::deque<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData>, std::__1::allocator<std::__1::shared_ptr<CLBarometerCalibration_Types::CLBarometerCalibrationData> > >, 4>;

typedef struct array<CLBarometerCalibrationContextManager *, 4> {
	CLBarometerCalibrationContextManager* __elems_[4];
} array<CLBarometerCalibrationContextManager *, 4>;

typedef struct _compressed_pair<CLBundleLocationProvider *, std::__1::default_delete<CLBundleLocationProvider> > {
	CLBundleLocationProvider __value_;
} compressed_pair<CLBundleLocationProvider *, std::__1::default_delete<CLBundleLocationProvider> >;

typedef struct unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > {
	compressed_pair<CLBundleLocationProvider *, std::__1::default_delete<CLBundleLocationProvider> > __ptr_;
} unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >;

typedef struct _compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> > {
	Client __value_;
} compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >;

typedef struct unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client> > {
	compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> > __ptr_;
} unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >;

typedef struct _compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> > {
	CLSuggestedActionDatabase __value_;
} compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> >;

typedef struct unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase> > {
	compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> > __ptr_;
} unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase> >;

typedef struct _compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> > {
	Client __value_;
} compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >;

typedef struct unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> > {
	compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> > __ptr_;
} unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >;

typedef struct _compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> > {
	Client __value_;
} compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >;

typedef struct unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> > {
	compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> > __ptr_;
} unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >;

typedef struct {
	unsigned long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_TR108;

typedef struct {
	double list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_TR109;

typedef struct _compressed_pair<CLNADController *, std::__1::default_delete<CLNADController> > {
	CLNADController __value_;
} compressed_pair<CLNADController *, std::__1::default_delete<CLNADController> >;

typedef struct unique_ptr<CLNADController, std::__1::default_delete<CLNADController> > {
	compressed_pair<CLNADController *, std::__1::default_delete<CLNADController> > __ptr_;
} unique_ptr<CLNADController, std::__1::default_delete<CLNADController> >;

typedef struct CLAccelerometerPace {
	double calibrated;
	double lowerBound;
	double upperBound;
} CLAccelerometerPace;

typedef struct FalseStepDetectorState {
	unsigned accelPoseXHigh : 1;
	unsigned accelVarXYZLow : 1;
	unsigned gyroNumSamplesSufficient : 1;
	unsigned gyroVarXHigh : 1;
	unsigned consecutiveRequirement : 1;
	unsigned isVehicularLowConfidence : 1;
	unsigned isVehicularHighConfidence : 1;
	unsigned consistentStepsProtection : 1;
} FalseStepDetectorState;

typedef struct MovementStats {
	float walkingVariable01;
} MovementStats;

typedef struct CLStepCountEntryAddition {
	double totalCalibratedDistance;
	double rawPace;
	unsigned incrementalSteps;
	double incrementalActiveTime;
	double firstStepTime;
	double lastStepTime;
	double odometerSpeed;
	BOOL rawPaceDidJump;
	double calibratedDistance;
} CLStepCountEntryAddition;

typedef struct CLStepCountEntry {
	double timestamp;
	double startTime;
	double firstStepTime;
	unsigned count;
	double distance;
	double rawDistance;
	unsigned floorsAscended;
	unsigned floorsDescended;
	double currentPace;
	double currentCadence;
	double activeTime;
	int recordId;
	__CFString sourceId;
	BOOL isOdometerDistance;
	BOOL isOdometerPace;
	CLAccelerometerPace accelerometerPace;
	unsigned pushCount;
	unsigned workoutType;
	unsigned char pedometerArmConstrainedState;
	unsigned elevationAscended;
	unsigned elevationDescended;
	FalseStepDetectorStateUnion falseStepDetectorState;
	FalseStepDetectorState falseStepDetectorState;
	C) data;
	unsigned char falseStepsSuppressed;
	unsigned char distanceSource;
	MovementStats movementStats;
} CLStepCountEntry;

typedef struct CLExtendedStepCountEntry {
	double startTime;
	CLStepCountEntry base;
	CLStepCountEntryAddition addition;
} CLExtendedStepCountEntry;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __value_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CLStrideCalEntry> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<CLStrideCalEntry> >;

typedef struct {
	int recordId;
	double startTime;
	unsigned pacebin;
	double kvalue;
	double kvalueTrack;
	double score;
	double endTime;
	double distance;
	int steps;
	int session;
	double speed;
	double percentGrade;
	int gpsSource;
	double timestamp;
} SCD_Struct_CM121;

typedef struct type {
	unsigned char __lx[24];
} type;

typedef struct _compressed_pair<CLSqliteDatabase *, std::__1::default_delete<CLSqliteDatabase> > {
	CLSqliteDatabase __value_;
} compressed_pair<CLSqliteDatabase *, std::__1::default_delete<CLSqliteDatabase> >;

typedef struct CLSqliteCachedStatement {
	CLSqliteDatabase fDb;
	sqlite3_stmt fStatement;
} CLSqliteCachedStatement;

typedef struct BasicMutex {
	/*function pointer*/void* _vptr$Mutex;
	MutexInfo info;
} BasicMutex;

typedef struct _value_func<bool (void *, bool)> {
	type __buf_;
	__base<bool (void *, bool)> __f_;
} value_func<bool (void *, bool)>;

typedef struct function<bool (void *, bool)> {
	value_func<bool (void *, bool)> __f_;
} function<bool (void *, bool)>;

typedef struct ClassCDataProtectionPolicy {
	/*function pointer*/void* _vptr$BasicDataProtectionPolicy;
	void fClient;
	function<bool (void *, bool)> fOnDataProtectionChange;
	BasicMutex fMutex;
} ClassCDataProtectionPolicy;

typedef struct _compressed_pair<CLStrideCalEntry **, std::__1::allocator<CLStrideCalEntry *> > {
	/*function pointer*/void* __value_;
} compressed_pair<CLStrideCalEntry **, std::__1::allocator<CLStrideCalEntry *> >;

typedef struct _split_buffer<CLStrideCalEntry *, std::__1::allocator<CLStrideCalEntry *> > {
	/*function pointer*/void* __first_;
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<CLStrideCalEntry **, std::__1::allocator<CLStrideCalEntry *> > __end_cap_;
} split_buffer<CLStrideCalEntry *, std::__1::allocator<CLStrideCalEntry *> >;

typedef struct deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry> > {
	split_buffer<CLStrideCalEntry *, std::__1::allocator<CLStrideCalEntry *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<CLStrideCalEntry> > __size_;
} deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry> >;

typedef struct unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase> > {
	compressed_pair<CLSqliteDatabase *, std::__1::default_delete<CLSqliteDatabase> > __ptr_;
} unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase> >;

typedef struct CMStrideCalRecorderDb {
	/*function pointer*/void* _vptr$CLActivityRecorderDb;
	unique_ptr<CLSqliteDatabase, std::__1::default_delete<CLSqliteDatabase> > fDb;
	char* fName;
	BasicMutex fMutex;
	BOOL fFatalError;
	deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry> > fBuffer;
	int fInternalRecordCount;
	float fSampleInterval;
	int fPersistence;
	SCD_Struct_CM121 fPrevEntry;
	int fMaxBufferSize;
	NSObject<OS_os_transaction>* fInMemoryTransaction;
	ClassCDataProtectionPolicy fProtectionPolicy;
	CLSqliteCachedStatement fSqlGetCount;
	CLSqliteCachedStatement fSqlGetAllAsc;
	CLSqliteCachedStatement fSqlGetPacebinDesc;
	CLSqliteCachedStatement fSqlGetSpeedRangeDesc;
	CLSqliteCachedStatement fSqlDeleteBefore;
	CLSqliteCachedStatement fSqlDeleteAfter;
	CLSqliteCachedStatement fSqlDeleteAll;
	CLSqliteCachedStatement fSqlInsert;
	CLSqliteCachedStatement fSqlShiftStartTimes;
	CLSqliteCachedStatement fSqlMostRecent;
	CLSilo* fFinishedInsertSilo;
	/*^block*/id fFinishedInsertHandler;
} CMStrideCalRecorderDb;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CMMsl::Item *, void *> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CMMsl::Item *, void *> > >;

typedef struct _list_node_base<CMMsl::Item *, void *> {
	__list_node_base<CMMsl::Item *, void *> __prev_;
	__list_node_base<CMMsl::Item *, void *> __next_;
} list_node_base<CMMsl::Item *, void *>;

typedef struct list<CMMsl::Item *, std::__1::allocator<CMMsl::Item *> > {
	list_node_base<CMMsl::Item *, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CMMsl::Item *, void *> > > __size_alloc_;
} list<CMMsl::Item *, std::__1::allocator<CMMsl::Item *> >;

typedef struct MagnitudeFeatures {
	float fMagMax;
	float fXMin;
	float fXMax;
	float fYMin;
	float fYMax;
	float fZMin;
	float fZMax;
} MagnitudeFeatures;

typedef struct ZeroCrossingFeatures {
	float fXZeroCrossingTime;
	float fYZeroCrossingTime;
	float fZZeroCrossingTime;
} ZeroCrossingFeatures;

typedef struct JerkFeatures {
	float fJerkVectorMagMax;
	float fXJerkScalarMagMax;
	float fYJerkScalarMagMax;
	float fZJerkScalarMagMax;
} JerkFeatures;

typedef struct HighFrequencyFeatures {
	MagnitudeFeatures fMagnitudeFeatures;
	MagnitudeFeatures fExtrapolatedMagnitudeFeatures;
	ZeroCrossingFeatures fZeroCrossingFeatures;
	JerkFeatures fJerkFeatures;
} HighFrequencyFeatures;

typedef struct Impact {
	unsigned short fSeq;
	unsigned char fTrialCount;
	char fCrown;
	unsigned long long fNow;
	unsigned char fAge;
	unsigned char fState;
	char fFallType;
	BOOL fIsFall;
	BOOL fIsNearFall;
	unsigned char fSimulated;
	unsigned long long fTimestamp;
	HighFrequencyFeatures fHighFrequencyFeatures;
	unsigned long long fPeakTimestamp;
	float fAccelPathLength;
	float fMinInertialZ;
	float fAngleChangePreImpact;
	float fAngleChangePostImpact;
	float fMaxAngleChangePreImpact;
	float fMaxAngleChangePostImpact;
	float fSumDeltaAngles;
	float fPosteriorRatio;
	float fPoseAtImpact;
	float fTiltAngle;
	float fSwingAngle;
	float fAccelPathLengthWithPeak;
	float fPathLengthHarmonicMean;
	float fPathLengthDecorrelation;
	float fPathLengthDelaySpread;
} Impact;

typedef struct ImpactEvent {
	Impact fImpact;
	unsigned char fResponse;
	unsigned char fResolution;
	double fAbsoluteTimestamp;
	double fTimestamp;
} ImpactEvent;

typedef struct _compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> > {
	Client __value_;
} compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >;

typedef struct unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> > {
	compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> > __ptr_;
} unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >;

typedef struct _compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> > {
	Client __value_;
} compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >;

typedef struct unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> > {
	compressed_pair<CLLocationAwarenessProvider_Type::Client *, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> > __ptr_;
} unique_ptr<CLLocationAwarenessProvider_Type::Client, std::__1::default_delete<CLLocationAwarenessProvider_Type::Client> >;

typedef struct MonitoringParameters {
	double latencyBudget;
	double retryRate;
	BOOL queryALS;
} MonitoringParameters;

typedef struct RegInfo {
	MonitoringParameters settledParameters;
	MonitoringParameters unsettledParameters;
} RegInfo;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > >;

typedef struct _compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> > {
	pair<double, double> __value_;
} compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> >;

typedef struct _split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> > {
	pair<double, double> __first_;
	pair<double, double> __begin_;
	pair<double, double> __end_;
	compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> > __end_cap_;
} split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> >;

typedef struct deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > > {
	split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > > __size_;
} deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > >;

typedef struct {
	int field1;
	SCD_Struct_CL46 field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	int field11;
	double field12;
	int field13;
	SCD_Struct_CL46 field14;
	double field15;
	int field16;
	unsigned field17;
	int field18;
	int field19;
	int field20;
} SCD_Struct_CL153;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	double field5;
	double field6;
	int field7;
	int field8;
	unsigned field9;
} SCD_Struct_CL154;

typedef struct {
	unsigned numberOfSurroundingCdmaCells : 1;
	unsigned numberOfSurroundingCdmaEvdoCells : 1;
	unsigned numberOfSurroundingCells : 1;
	unsigned numberOfSurroundingLteCells : 1;
	unsigned numberOfSurroundingScdmaCells : 1;
	unsigned numberOfSurroundingWifis : 1;
} SCD_Struct_AL155;

typedef struct CLLocationCoordinate2D {
	double latitude;
	double longitude;
} CLLocationCoordinate2D;

typedef struct vector<unsigned long long, std::__1::allocator<unsigned long long> >* vector<unsigned long long, std::__1::allocator<unsigned long long> >Ref;

typedef struct vector<CLTilesManager_Type::TransitMac, std::__1::allocator<CLTilesManager_Type::TransitMac> >* vector<CLTilesManager_Type::TransitMac, std::__1::allocator<CLTilesManager_Type::TransitMac> >Ref;

typedef struct list<CLTilesManager_Type::AppAvailability, std::__1::allocator<CLTilesManager_Type::AppAvailability> >* list<CLTilesManager_Type::AppAvailability, std::__1::allocator<CLTilesManager_Type::AppAvailability> >Ref;

typedef struct _compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> > {
	Client __value_;
} compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >;

typedef struct unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> > {
	compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> > __ptr_;
} unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >;

typedef struct CLOdometerEntry {
	double startTime;
	double distance;
	double accuracy;
	double gpsAltitude;
	double speed;
	double rawSpeed;
	double odometer;
	double gpsSpeedAccuracy;
	double timestampGps;
	int quality;
	int originDevice;
	int type;
	double groundAltitude;
	double groundAltitudeUncertainty;
	double smoothedGPSAltitude;
	double smoothedGPSAltitudeUncertainty;
	double gpsCourseRadians;
	double gpsCourseAccuracy;
} CLOdometerEntry;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *> > >;

typedef struct map<unsigned int, CLBarometerCalibrationSource *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, CLBarometerCalibrationSource *> > > {
	tree<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, CLBarometerCalibrationSource *> > > __tree_;
} map<unsigned int, CLBarometerCalibrationSource *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, CLBarometerCalibrationSource *> > >;

typedef struct CLGizmoOrientation {
	int fWrist;
	int fCrown;
} CLGizmoOrientation;

typedef struct vector<CLExerciseMinuteData, std::__1::allocator<CLExerciseMinuteData> >* vector<CLExerciseMinuteData, std::__1::allocator<CLExerciseMinuteData> >Ref;

typedef struct _compressed_pair<CLTilesManager_Type::Client *, std::__1::default_delete<CLTilesManager_Type::Client> > {
	Client __value_;
} compressed_pair<CLTilesManager_Type::Client *, std::__1::default_delete<CLTilesManager_Type::Client> >;

typedef struct unique_ptr<CLTilesManager_Type::Client, std::__1::default_delete<CLTilesManager_Type::Client> > {
	compressed_pair<CLTilesManager_Type::Client *, std::__1::default_delete<CLTilesManager_Type::Client> > __ptr_;
} unique_ptr<CLTilesManager_Type::Client, std::__1::default_delete<CLTilesManager_Type::Client> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >;

typedef struct _compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> > {
	CLElevationChangeEntry __value_;
} compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >;

typedef struct _split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> > {
	CLElevationChangeEntry __first_;
	CLElevationChangeEntry __begin_;
	CLElevationChangeEntry __end_;
	compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> > __end_cap_;
} split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >;

typedef struct deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> > {
	split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> > __size_;
} deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >;

typedef struct CLDaemonLocation {
	int suitability;
	SCD_Struct_CL46 coordinate;
	double horizontalAccuracy;
	double altitude;
	double verticalAccuracy;
	double speed;
	double speedAccuracy;
	double course;
	double courseAccuracy;
	double timestamp;
	int confidence;
	double lifespan;
	int type;
	SCD_Struct_CL46 rawCoordinate;
	double rawCourse;
	int floor;
	unsigned integrity;
	int referenceFrame;
	int rawReferenceFrame;
	int signalEnvironmentType;
} CLDaemonLocation;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	int field5;
	int field6;
	int field7;
	int field8;
	double field9[50];
	double field10[50];
} SCD_Struct_CL176;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
} SCD_Struct_CL177;

typedef struct {
	double field1;
	int field2;
	int field3;
	int field4;
	int field5;
	SCD_Struct_CL177 field6[50];
} SCD_Struct_CL178;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket> > >;

typedef struct unordered_map<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket> > > {
	hash_table<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket> > > __table_;
} unordered_map<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket> > >;

typedef struct CLBarometerCalibrationWiFiActiveScanBuffer {
	unordered_map<CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLBarometerCalibrationWiFiActiveScanBucket> > > buffer;
} CLBarometerCalibrationWiFiActiveScanBuffer;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct CLStrideLengthStepCadencePair {
	float strideLength;
	float stepCadence;
} CLStrideLengthStepCadencePair;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > >;

typedef struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > > {
	tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > > __tree_;
} map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > >;

typedef struct _compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> > {
	Dispatcher __value_;
} compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >;

typedef struct unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> > {
	compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> > __ptr_;
} unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >;

typedef struct {
	BOOL field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
	BOOL field5;
	BOOL field6;
	unsigned char field7;
	float field8;
	char field9;
	unsigned short field10;
} SCD_Struct_CL198;

typedef struct {
	unsigned field1[8];
} SCD_Struct_CL199;

typedef struct _compressed_pair<CMMsl::WriterManager<CLLegacyFileManager> *, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager> > > {
	WriterManager<CLLegacyFileManager> __value_;
} compressed_pair<CMMsl::WriterManager<CLLegacyFileManager> *, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager> > >;

typedef struct unique_ptr<CMMsl::WriterManager<CLLegacyFileManager>, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager> > > {
	compressed_pair<CMMsl::WriterManager<CLLegacyFileManager> *, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager> > > __ptr_;
} unique_ptr<CMMsl::WriterManager<CLLegacyFileManager>, std::__1::default_delete<CMMsl::WriterManager<CLLegacyFileManager> > >;

typedef struct _compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >;

typedef struct unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> > {
	compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> > __ptr_;
} unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >;

typedef struct _compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> > {
	Client __value_;
} compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >;

typedef struct unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> > {
	compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> > __ptr_;
} unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >;

typedef struct CLBodyMetrics {
	int gender;
	float heightM;
	float weightKG;
	float vo2max;
	float age;
	float hrmin;
	float hrmax;
	float hronset;
	float pal;
	int condition;
	float runVo2max;
} CLBodyMetrics;

typedef struct WorkoutRecorderHealthKitInfo {
	/*function pointer*/void* _vptr$Base;
	double _restingHeartRate;
	double _walkingHeartRateAverage;
	unsigned _workoutActivityType;
	SCD_Struct_AL5 _has;
} WorkoutRecorderHealthKitInfo;

typedef struct _compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> > {
	Client __value_;
} compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >;

typedef struct unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> > {
	compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> > __ptr_;
} unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >;

typedef struct _compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> > {
	CLPowerAssertion __value_;
} compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> >;

typedef struct unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> > {
	compressed_pair<CLPowerAssertion *, std::__1::default_delete<CLPowerAssertion> > __ptr_;
} unique_ptr<CLPowerAssertion, std::__1::default_delete<CLPowerAssertion> >;

