/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, November 5, 2019 at 3:11:48 PM Mountain Standard Time
* Operating System: Version 13.0 (Build 17J586)
* Image Source: /usr/libexec/locationd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <locationd/locationd-Structs.h>
#import <LocationSupport/CLIntersiloService.h>
#import <locationd/NSXPCListenerDelegate.h>
#import <locationd/CLInternalServiceSiloProtocol.h>
#import <locationd/CLInternalServiceSiloClientProtocol.h>
#import <locationd/CLLocationInternalServiceProtocol.h>

@class NSXPCListener, NSString;

@interface CLInternalService : CLIntersiloService <NSXPCListenerDelegate, CLInternalServiceSiloProtocol, CLInternalServiceSiloClientProtocol, CLLocationInternalServiceProtocol> {

	NSXPCListener* _listener;

}

@property (nonatomic,retain) NSXPCListener * listener;              //@synthesize listener=_listener - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic) BOOL valid; 
+(void)becameFatallyBlocked:(id)arg1 index:(unsigned long long)arg2 ;
+(id)getSilo;
+(void)performSyncOnSilo:(id)arg1 invoker:(/*^block*/id)arg2 ;
+(BOOL)getEffectiveClientName:(id)arg1 bundlePath:(id)arg2 name:(Name*)arg3 ;
+(id)getIntersiloDelegate;
+(id)getAsyncResponseSilo;
-(id)init;
-(NSXPCListener *)listener;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)setListener:(NSXPCListener *)arg1 ;
-(void)beginService;
-(void)endService;
-(void)getTechnologiesInUseWithReplyBlock:(/*^block*/id)arg1 ;
-(void)getAppsUsingLocationWithReplyBlock:(/*^block*/id)arg1 ;
-(void)setLocationDefaultForKey:(id)arg1 andValue:(id)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)getLocationDefaultForKey:(id)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)timeZoneForLocation:(SCD_Struct_CL153)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)setGestureServiceEnabled:(BOOL)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)performMigrationWithReplyBlock:(/*^block*/id)arg1 ;
-(void)shutdownDaemonWithReplyBlock:(/*^block*/id)arg1 ;
-(void)setAuthorizationStatus:(BOOL)arg1 withCorrectiveCompensation:(int)arg2 forBundleID:(id)arg3 orBundlePath:(id)arg4 replyBlock:(/*^block*/id)arg5 ;
-(void)setPrivateMode:(BOOL)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)getPrivateMode:(/*^block*/id)arg1 ;
-(void)setLocationServicesEnabled:(BOOL)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)getLocationServicesEnabledWithReplyBlock:(/*^block*/id)arg1 ;
-(void)setAuthorizationPromptMapDisplayEnabled:(BOOL)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)getAuthorizationPromptMapDisplayEnabledWithReplyBlock:(/*^block*/id)arg1 ;
-(void)getGestureServiceEnabledWithReplyBlock:(/*^block*/id)arg1 ;
-(void)pingDaemonWithReplyBlock:(/*^block*/id)arg1 ;
-(void)getAuthorizationStatusForBundleID:(id)arg1 orBundlePath:(id)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)displayStatisticsWithReplyBlock:(/*^block*/id)arg1 ;
-(void)dumpLogsWithDescription:(id)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)copyLastLogWithReplyBlock:(/*^block*/id)arg1 ;
-(void)getMonitoredRegionsForBundleID:(id)arg1 orBundlePath:(id)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)checkAndExerciseAuthorizationForBundleID:(id)arg1 orBundlePath:(id)arg2 services:(unsigned long long)arg3 replyBlock:(/*^block*/id)arg4 ;
-(void)getLocationForBundleID:(id)arg1 orBundlePath:(id)arg2 dynamicAccuracyReductionEnabled:(BOOL)arg3 allowsAlteredAccessoryLocations:(BOOL)arg4 replyBlock:(/*^block*/id)arg5 ;
-(void)resetAllClientsWithReplyBlock:(/*^block*/id)arg1 ;
-(void)applyArchivedAuthorizationDecisions:(id)arg1 withConfirmationToken:(id)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)getArchivedAuthorizationDecisionsWithReplyBlock:(/*^block*/id)arg1 ;
-(void)setStatusBarIconEnabledForEntityClass:(unsigned)arg1 enabled:(BOOL)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)getStatusBarIconEnabledForEntityClass:(unsigned)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)getStatusBarIconState:(/*^block*/id)arg1 ;
-(void)setMapMatchingRouteHint:(id)arg1 routingType:(int)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)getPipelinedCacheWithReply:(/*^block*/id)arg1 ;
-(void)getActivitiesWithReplyBlock:(/*^block*/id)arg1 ;
-(void)setAuthorizationStatusByType:(int)arg1 withCorrectiveCompensation:(int)arg2 forBundleID:(id)arg3 orBundlePath:(id)arg4 replyBlock:(/*^block*/id)arg5 ;
-(void)setTemporaryAuthorizationGranted:(BOOL)arg1 forBundleID:(id)arg2 orBundlePath:(id)arg3 replyBlock:(/*^block*/id)arg4 ;
-(void)gyroCalibrationDatabaseSupportsMiniCalibrationWithReplyBlock:(/*^block*/id)arg1 ;
-(void)setBackgroundIndicatorEnabled:(BOOL)arg1 forBundleID:(id)arg2 orBundlePath:(id)arg3 replyBlock:(/*^block*/id)arg4 ;
-(void)getOscarTimeSyncWithReplyBlock:(/*^block*/id)arg1 ;
-(void)startStopAdvertisingBeacon:(id)arg1 atPower:(int)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)getGyroCalibrationDatabaseBiasFitAtTemplerature:(float)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)insertGyroCalibrationDatabaseBiasEstimateIfValid:(ZeroCrossingFeatures)arg1 temperature:(float)arg2 variance:(ZeroCrossingFeatures)arg3 timestamp:(double)arg4 replyBlock:(/*^block*/id)arg5 ;
-(void)gyroCalibrationDatabaseWipeWithReplyBlock:(/*^block*/id)arg1 ;
-(void)compassCalibrationDatabaseGetBiasWithMagneticField:(ZeroCrossingFeatures)arg1 acceleration:(ZeroCrossingFeatures)arg2 replyBlock:(/*^block*/id)arg3 ;
-(void)gyroCalibrationDatabaseGetNumTemperaturesWithReplyBlock:(/*^block*/id)arg1 ;
-(void)setCompassCalibrationDatabaseMagneticField:(ZeroCrossingFeatures)arg1 bias:(ZeroCrossingFeatures)arg2 level:(int)arg3 magnitude:(float)arg4 inclination:(float)arg5 replyBlock:(/*^block*/id)arg6 ;
-(void)configure:(SCD_Struct_CL198)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)getControlPlaneStatusReportClear:(int)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)getMotionSensorLogsWithReply:(/*^block*/id)arg1 ;
-(void)getAccessoryMotionSensorLogsWithReply:(/*^block*/id)arg1 ;
-(void)notifyPassKitPayment:(id)arg1 transaction:(id)arg2 info:(id)arg3 ;
-(void)notifyWeatherForecast:(id)arg1 airQualityConditions:(id)arg2 hourlyForecasts:(id)arg3 dailyForecasts:(id)arg4 latitude:(double)arg5 longitude:(double)arg6 ;
-(SCD_Struct_CL199)currentToken;
@end

